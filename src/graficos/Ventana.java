/*
 * Ventana.java
 * 
 * Copyright (C) 2011 Vicenç Juan Tomàs Monserrat
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package graficos;

import java.awt.event.MouseEvent;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import estructuras.Lista_vuelos;
import elementos.Ciudad;
import estructuras.Cola_ciudades;
import elementos.Elemento;
import elementos.MapaMundo;
import estructuras.Pila_ciudades;
import elementos.Vuelo;
import java.awt.Dimension;
import java.awt.Font;
import java.io.PrintWriter;
import java.io.StringWriter;

public class Ventana extends javax.swing.JFrame {

    /** Creates new form Ventana */
    public Ventana() {
        initComponents();
        initLookAndFeel();
        SwingUtilities.updateComponentTreeUI(this);
        inicializar_matriz_vuelos();
        init();
        inicializar_matriz_distancias();
    }
   
    private String origen, destino = "";
    private int codigo = 1;
    private static final int max_ciudades = 100;
    private int ciudades_creadas = 0;
    private Ciudad[] ciudades = new Ciudad[max_ciudades];
    private Vuelo[] vuelos;
    private Lista_vuelos[][] listaVuelos = new Lista_vuelos[max_ciudades][max_ciudades];
    private MapaMundo mundo;
    private JPanel PanelMundo2;
    private double[][] distancias = new double[max_ciudades][max_ciudades];
    private JDialog DCreaVuelo;
    private JDialog DCreaCiudad;
    private JDialog DAbout;
    private JDialog DSalidaCosteTiempo;
    private JDialog DGenAle;
    private JDialog DVeureVols;
    
    public static void mostrarMissatgeError(JComponent parent, Exception e) {
        final JTextArea textArea = new JTextArea();
        textArea.setFont(new Font("Sans-Serif", Font.PLAIN, 11));
        textArea.setEditable(false);
        StringWriter writer = new StringWriter();
        e.printStackTrace(new PrintWriter(writer));
        textArea.setText(writer.toString());

        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setPreferredSize(new Dimension(350, 150));

        JOptionPane.showMessageDialog(parent, scrollPane, "Ha ocorregut un error.", JOptionPane.ERROR_MESSAGE);
    }
    
    private void initLookAndFeel() {
        String lookAndFeel = null;
        String osname = System.getProperty("os.name").toLowerCase();
        
        if (osname.equals("linux")) {
            lookAndFeel = "com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel";
        } else if (osname.startsWith("windows")) {
            lookAndFeel = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
        } else if (osname.startsWith("mac")) {
            lookAndFeel = UIManager.getSystemLookAndFeelClassName();
        } else {
            lookAndFeel = UIManager.getCrossPlatformLookAndFeelClassName();
        }

        try {
            UIManager.setLookAndFeel(lookAndFeel);
        } catch (Exception e) {
            mostrarMissatgeError(null, e);
        }
    }    
    
    private void print(String str) {
        TextoSalida.append(str);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void pinta_mapa() {
        for (int i = 0; i < ciudades_creadas; i++) {
            for (int j = 0; j < ciudades_creadas; j++) {
                listaVuelos[i][j].pinta_vuelo(mundo);
            }
        }
    }

//    private void muestra_vuelos() {
//        for (int i = 0; i < ciudades_creadas; i++) {
//            for (int j = 0; j < ciudades_creadas; j++) {
//                listaVuelos[i][j].imprimir();
//            }
//        }
//    }

    public void reiniciarTabla() {
        for (int j = 0; j < ResultadosCoste.getRowCount(); j++) {
            ResultadosCoste.setValueAt("", j, 0);
            ResultadosCoste.setValueAt("", j, 1);
            ResultadosCoste.setValueAt("", j, 2);
            ResultadosCoste.setValueAt("", j, 3);
            ResultadosCoste.setValueAt(null, j, 4);
        }
        for (int j = 0; j < ResultadosTiempo.getRowCount(); j++) {
            ResultadosTiempo.setValueAt("", j, 0);
            ResultadosTiempo.setValueAt("", j, 1);
            ResultadosTiempo.setValueAt("", j, 2);
            ResultadosTiempo.setValueAt("", j, 3);
            ResultadosTiempo.setValueAt(null, j, 4);
        }
    }

    private int posicion_ciudad2(String nombre_ciudad) {
        boolean encontrada = false;
        int posicion = 0;
        while (encontrada == false && posicion <= ciudades_creadas) {
            if (ciudades[posicion].getnombre().equals(nombre_ciudad)) {
                encontrada = true;
            } else {
                posicion++;
            }
        }
        if (encontrada == true) {
            return posicion;
        } else {
            return -1;
        }
    }

    private int posicion_ciudad(String nombre_ciudad) {
        boolean encontrada = false;
        int posicion = 0;
        if (nombre_ciudad.equals("1")) {
            nombre_ciudad = origen;
        } else {
            nombre_ciudad = destino;
        }
        if (!destino.equals("")) {
            while (encontrada == false && posicion <= ciudades_creadas) {
                if (ciudades[posicion].getnombre().equals(nombre_ciudad)) {
                    encontrada = true;
                } else {
                    posicion++;
                }
            }
            if (encontrada == true) {
                return posicion;
            } else {
                return -1;
            }
        } else {
            return -1;
        }
    }

    private void inicializar_matriz_vuelos() {
        for (int i = 0; i < max_ciudades; i++) {
            for (int j = 0; j < max_ciudades; j++) {
                listaVuelos[i][j] = new Lista_vuelos();
            }
        }
    }

    private void inicializar_matriz_distancias() {
        for (int i = 0; i < max_ciudades; i++) {
            for (int j = 0; j < max_ciudades; j++) {
                distancias[i][j] = 0;
            }
        }
    }

    private void actualizar_matriz_distancias() {
        int x1, x2, y1, y2;
        double distancia;
        for (int i = 0; i < ciudades_creadas; i++) {
            x1 = ciudades[i].getcx();
            y1 = ciudades[i].getcy();
            for (int j = 0; j < ciudades_creadas; j++) {
                x2 = ciudades[j].getcx();
                y2 = ciudades[j].getcy();
                if (x1 > x2 && y1 > y2) {
                    distancia = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
                } else if (x1 > x2 && y1 < y2) {
                    distancia = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y2 - y1, 2));
                } else if (x1 < x2 && y1 > y2) {
                    distancia = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y1 - y2, 2));
                } else {
                    distancia = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
                }
                distancias[i][j] = distancia;
            }
        }
    }

//    void mostrar_ruta(String ciudad_origen, String ciudad_destino, String[] ciudad_predecesora, Vuelo[] codigo_vuelo) {
//        int pos = posicion_ciudad(ciudad_destino);
//        String[] lista_ciudades = new String[100];
//        Vuelo[] lista_codigos_vuelo = new Vuelo[100];
//        for (int i = 0; i < 100; i++) {
//            lista_codigos_vuelo[i] = null;
//        }
//        for (int i = 0; i < 100; i++) {
//            lista_ciudades[i] = "";
//        }
//        int i = 0;
//        lista_ciudades[i] = ciudad_destino;
//        lista_codigos_vuelo[i] = codigo_vuelo[posicion_ciudad(ciudad_destino)];
//        i = i + 1;
//        while (!ciudad_predecesora[pos].equals("")) {
//            lista_ciudades[i] = ciudad_predecesora[pos];
//            lista_codigos_vuelo[i] = codigo_vuelo[posicion_ciudad(ciudad_predecesora[pos])];
//            i = i + 1;
//            pos = posicion_ciudad(ciudad_predecesora[pos]);
//        }
//        print("La lista de las ciudades es: ");
//        for (i = 99; i >= 0; i--) {
//            if (!lista_ciudades[i].equals("")) {
//                print(lista_ciudades[i] + "\n");
//            }
//        }
//        print("La lista de los vuelos es: " + "\n");
//        for (i = 99; i >= 0; i--) {
//            if (lista_codigos_vuelo[i] != null) {
//                print("Vuelo: ");
//                print(lista_codigos_vuelo[i].get_codigo() + " con hora de salida: "
//                        + lista_codigos_vuelo[i].get_horasal() + " y hora de llegada: " + lista_codigos_vuelo[i].get_horalleg() + "\n");
//            }
//        }
//        print("\n");
//    }

//    public void mostrar_ciudades() {
////       for (int i=0; i<ciudades_creadas; i++){
////            print(ciudades [i].getnombre() + "\n");
////            print(ciudades [i].getcx() + "\n");
////            print(ciudades [i].getcy() + "\n");
////        }
//        for (int i = 0; i < ciudades_creadas; i++) {
//            print(ciudades[i].getnombre() + "\n"
//                    + ciudades[i].getcx() + "\n"
//                    + ciudades[i].getcy() + "\n");
//        }
//    }

    private void busqueda_prof(String ciudad_origen, String ciudad_destino, int tipus) throws ParseException {
        double tiempo, tiempo2, tiempo3;
        Pila_ciudades p = new Pila_ciudades();
        int pos_ciudad_or;
        int iteraciones = 0;
        int num_vuelos_candidatos = 0;
        Vuelo sig_vuelo;
        boolean ciclo;
        Elemento ciudad_actual;
        int nodos_visitados = 0, nodos_expandidos = 0;
        Date hora_llegada_origen = new Date();
        String[] lista_ciudades = new String[100];
        for (int i = 0; i < 100; i++) {
            lista_ciudades[i] = "";
        }
        Vuelo[] lista_vuelos = new Vuelo[100];
        for (int i = 0; i < 100; i++) {
            lista_vuelos[i] = null;
        }
        Elemento vuelos_candidatos = null;
        Ciudad origen1 = ciudades[posicion_ciudad2(ciudad_origen)];
        lista_ciudades[0] = ciudad_origen;
        lista_vuelos[0] = null;
        Vuelo[] lista_vuelos_obtenida = new Vuelo[100];
        String[] lista_ciudades_obtenida = new String[100];
        nodos_expandidos++;
        tiempo = System.nanoTime();
        p.añadir_pila(origen1.getnombre(), origen1.getcx(), origen1.getcy(), hora_llegada_origen, 0, lista_ciudades, lista_vuelos);
        while (p.Vacia() == false) {
            iteraciones++;
            ciudad_actual = p.quitar_pila();
            nodos_visitados++;
            if (!ciudad_actual.getnombre().equals(ciudad_destino)) {
                pos_ciudad_or = posicion_ciudad2(ciudad_actual.getnombre());
                for (int i = ciudades_creadas - 1; i >= 0; i--) {
                    if (listaVuelos[pos_ciudad_or][i].Vacia() == false) {
                        ciclo = hay_ciclo(ciudad_actual.get_ciudades(), ciudades[i].getnombre());
                        if (ciclo == false) {
                            sig_vuelo = listaVuelos[pos_ciudad_or][i].primero();
                            for (int z = 0; z < listaVuelos[pos_ciudad_or][i].numero_vuelos(); z++) {
                                if (sig_vuelo.get_horasal().after(ciudad_actual.get_horalleg())) {
                                    int posicion_array = 0;
                                    System.arraycopy(ciudad_actual.get_vuelos(), 0, lista_vuelos_obtenida, 0, ciudad_actual.get_vuelos().length);
                                    System.arraycopy(ciudad_actual.get_ciudades(), 0, lista_ciudades_obtenida, 0, ciudad_actual.get_ciudades().length);
                                    while (!lista_ciudades_obtenida[posicion_array].equals("")) {
                                        posicion_array++;
                                    }
                                    lista_ciudades_obtenida[posicion_array] = ciudades[i].getnombre();
                                    lista_vuelos_obtenida[posicion_array] = sig_vuelo;
                                    nodos_expandidos++;
                                    if (tipus == 0) {
                                        p.añadir_pila(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida);
                                    } else {
                                        if (iteraciones == 1) {
                                            p.añadir_pila_tiempo(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida, sig_vuelo.get_horasal(), sig_vuelo.get_horalleg().getTime() - sig_vuelo.get_horasal().getTime());
                                        } else {
                                            p.añadir_pila_tiempo(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida, ciudad_actual.get_primer_vuelo(), sig_vuelo.get_horalleg().getTime() - ciudad_actual.get_primer_vuelo().getTime());
                                        }
                                    }
                                }
                                sig_vuelo = listaVuelos[pos_ciudad_or][i].siguiente_vuelo(sig_vuelo);
                            }
                        }
                    }
                }
            } else {
                if (tipus == 0) {
                    if (num_vuelos_candidatos == 0) {
                        vuelos_candidatos = ciudad_actual;
                    } else {
                        if (vuelos_candidatos.get_precio() > ciudad_actual.get_precio()) {
                            vuelos_candidatos = ciudad_actual;
                        }
                    }
                } else {
                    if (num_vuelos_candidatos == 0) {
                        vuelos_candidatos = ciudad_actual;
                    } else {
                        if (vuelos_candidatos.get_tiempo_acum() > ciudad_actual.get_tiempo_acum()) {
                            vuelos_candidatos = ciudad_actual;
                        }
                    }
                }
                num_vuelos_candidatos++;
            }
        }
        tiempo2 = System.nanoTime();
        tiempo3 = (tiempo2 - tiempo);
        print("\nCERCA EN PROFUNDITAT\n");
        print(String.valueOf(iteraciones));
        print("Temps invertit: " + (tiempo3 / Math.pow(10, 9)) + " segons." + "\n");
        print("Nodes visitats: " + nodos_visitados + "\n");
        print("Nodes expandits: " + nodos_expandidos + "\n");
        print("El mínim cost per anar de: " + ciudad_origen + " a " + ciudad_destino + " es: ");
        Double t = tiempo3 / Math.pow(10, 9);
        Integer campo;
        Float campod;
        campod = t.floatValue();
        campo = nodos_visitados;
        campoNodovis.setText(campo.toString());
        campoNodovisTi.setText(campo.toString());
        print("\nNodes visitats: " + campo.toString() + " , ");
        campo = nodos_expandidos;
        campoNodoexp.setText(campo.toString());
        campoNodoexTi.setText(campo.toString());
        print("Nodes expandits: " + campo.toString() + " , ");
        campoTiempoeje.setText(campod.toString());
        campoTiempoejeTi.setText(campod.toString());
        print("Temps d'execució: " + campod.toString() + "\n");
        if (tipus == 0) {
            elegir_mejor_alternativa_coste(vuelos_candidatos);
        } else {
            elegir_mejor_alternativa_tiempo_nueva(vuelos_candidatos);
        }

    }

    private void elegir_mejor_alternativa_coste(Elemento vuelos_candidatos) {
        Elemento vuelo_elegido = vuelos_candidatos;
        if (vuelo_elegido != null) {
            print(vuelo_elegido.get_precio() + "\n");
            print("Preu total: " + vuelo_elegido.get_precio() + "\n");
            print("MINIM COST" + "\n");
            print("La ruta a seguir es: " + "\n");
            int i = 0;
            while (!vuelo_elegido.get_ciudades()[i].equals("")) {
                print(vuelo_elegido.get_ciudades()[i] + "\n");
                print(vuelo_elegido.get_ciudades()[i]);
                if (!vuelo_elegido.get_ciudades()[i + 1].equals("")) {
                    print(" + ");
                    ResultadosCoste.setValueAt(vuelo_elegido.get_ciudades()[i], i, 0);
                    ResultadosCoste.setValueAt(vuelo_elegido.get_ciudades()[i + 1], i, 1);
                }
                i++;
            }
            i = 1;
            print("La llista de vols a escollir es: " + "\n");
            int numCiu = 0;
            while (vuelo_elegido.get_vuelos()[i] != null) {
                print("Codi: " + vuelo_elegido.get_vuelos()[i].get_codigo() + "\n"
                        + "Hora sortida: " + vuelo_elegido.get_vuelos()[i].get_horasal() + "\nHora arribada: "
                        + vuelo_elegido.get_vuelos()[i].get_horalleg() + "\n");
                ResultadosCoste.setValueAt(vuelo_elegido.get_vuelos()[i].get_horasal(), i - 1, 2);
                ResultadosCoste.setValueAt(vuelo_elegido.get_vuelos()[i].get_horalleg(), i - 1, 3);
                ResultadosCoste.setValueAt(vuelo_elegido.get_vuelos()[i].get_precio(), i - 1, 4);
                i++;
                numCiu++;
            }
            Float pre;
            pre = vuelo_elegido.get_precio();
            campoCostetotal.setText(pre.toString());
            mundo.setVuelosRuta(vuelo_elegido.get_vuelos(), numCiu);
            mundo.setModoRuta(1);
            vuelos = vuelo_elegido.get_vuelos();
            repaint();
        }
        print("\n");
    }

    private void elegir_mejor_alternativa_tiempo_nueva(Elemento vuelos_candidatos) throws ParseException {
        Elemento vuelo_elegido = vuelos_candidatos;
        if (vuelo_elegido != null) {
            print(vuelo_elegido.get_precio() + "\n");
            print("MINIM TEMPS" + "\n");
            print("La duració del viatje es: ");
            Long tie = (vuelo_elegido.get_horalleg().getTime() - vuelo_elegido.get_primer_vuelo().getTime()) / 3600000;
            campoTiempotoTi.setText(tie.toString());
            print("Preu total: " + vuelo_elegido.get_precio() + "\n");
            print("Temps total: " + tie.toString() + "\n");
            print((vuelo_elegido.get_horalleg().getTime() - vuelo_elegido.get_primer_vuelo().getTime()) / 3600000 + " hores." + "\n");
            print("La ruta a seguir es: " + "\n");
            int i = 0;
            while (!vuelo_elegido.get_ciudades()[i].equals("")) {
                print(vuelo_elegido.get_ciudades()[i] + "\n");
                print(vuelo_elegido.get_ciudades()[i]);
                if (!vuelo_elegido.get_ciudades()[i + 1].equals("")) {
                    ResultadosTiempo.setValueAt(vuelo_elegido.get_ciudades()[i], i, 0);
                    ResultadosTiempo.setValueAt(vuelo_elegido.get_ciudades()[i + 1], i, 1);
                    print(" + ");
                }
                i++;
            }
            i = 1;
            print("La llista de vols a escollir es: " + "\n");
            int numCiu = 0;
            while (vuelo_elegido.get_vuelos()[i] != null) {
                print("Codi: " + vuelo_elegido.get_vuelos()[i].get_codigo() + "\n"
                        + "Hora sortida: " + vuelo_elegido.get_vuelos()[i].get_horasal() + "\nHora arribada: "
                        + vuelo_elegido.get_vuelos()[i].get_horalleg() + "\n");
                ResultadosTiempo.setValueAt(vuelo_elegido.get_vuelos()[i].get_horasal(), i - 1, 2);
                ResultadosTiempo.setValueAt(vuelo_elegido.get_vuelos()[i].get_horalleg(), i - 1, 3);
                tie = (vuelo_elegido.get_vuelos()[i].get_horalleg().getTime() - vuelo_elegido.get_vuelos()[i].get_horasal().getTime()) / 3600000;
                tie.toString();
                ResultadosTiempo.setValueAt(tie, i - 1, 4);
                i++;
                numCiu++;
            }
            mundo.setVuelosRuta(vuelo_elegido.get_vuelos(), numCiu);
            mundo.setModoRuta(1);
            Float pre;
            pre = vuelo_elegido.get_precio();
            campoPretoti.setText(pre.toString());
            vuelos = vuelo_elegido.get_vuelos();
            repaint();
        }
        print("\n");
    }

    private void busqueda_prof_poda_coste(String ciudad_origen, String ciudad_destino) throws ParseException {
        double tiempo, tiempo2, tiempo3;
        Pila_ciudades p = new Pila_ciudades();
        int pos_ciudad_or;
        int iteraciones = 0;
        int num_vuelos_candidatos = 0;
        float mejor_coste = 1000000;
        Vuelo sig_vuelo;
        boolean ciclo;
        Elemento ciudad_actual;
        int nodos_visitados = 0, nodos_expandidos = 0;
        Date hora_llegada_origen = new Date();
        String[] lista_ciudades = new String[100];
        for (int i = 0; i < 100; i++) {
            lista_ciudades[i] = "";
        }
        Vuelo[] lista_vuelos = new Vuelo[100];
        for (int i = 0; i < 100; i++) {
            lista_vuelos[i] = null;
        }
        Elemento vuelos_candidatos = null;
        Ciudad origen2 = ciudades[posicion_ciudad2(ciudad_origen)];
        lista_ciudades[0] = ciudad_origen;
        lista_vuelos[0] = null;
        Vuelo[] lista_vuelos_obtenida = new Vuelo[100];
        String[] lista_ciudades_obtenida = new String[100];
        nodos_expandidos++;
        tiempo = System.nanoTime();
        p.añadir_pila(origen2.getnombre(), origen2.getcx(), origen2.getcy(), hora_llegada_origen, 0, lista_ciudades, lista_vuelos);
        while (p.Vacia() == false) {
            iteraciones++;
            ciudad_actual = p.quitar_pila();
            nodos_visitados++;
            if (!ciudad_actual.getnombre().equals(ciudad_destino)) {
                pos_ciudad_or = posicion_ciudad2(ciudad_actual.getnombre());
                for (int i = ciudades_creadas - 1; i >= 0; i--) {
                    if (listaVuelos[pos_ciudad_or][i].Vacia() == false) {
                        ciclo = hay_ciclo(ciudad_actual.get_ciudades(), ciudades[i].getnombre());
                        if (ciclo == false) {
                            sig_vuelo = listaVuelos[pos_ciudad_or][i].primero();
                            for (int z = 0; z < listaVuelos[pos_ciudad_or][i].numero_vuelos(); z++) {
                                if (sig_vuelo.get_horasal().after(ciudad_actual.get_horalleg()) && (ciudad_actual.get_precio()) < mejor_coste) {
                                    int posicion_array = 0;                                                                       
                                    System.arraycopy(ciudad_actual.get_vuelos(), 0, lista_vuelos_obtenida, 0, ciudad_actual.get_vuelos().length);
                                    System.arraycopy(ciudad_actual.get_ciudades(), 0, lista_ciudades_obtenida, 0, ciudad_actual.get_ciudades().length);
                                    while (!lista_ciudades_obtenida[posicion_array].equals("")) {
                                        posicion_array++;
                                    }
                                    lista_ciudades_obtenida[posicion_array] = ciudades[i].getnombre();
                                    lista_vuelos_obtenida[posicion_array] = sig_vuelo;
                                    nodos_expandidos++;
                                    p.añadir_pila(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida);

                                }
                                sig_vuelo = listaVuelos[pos_ciudad_or][i].siguiente_vuelo(sig_vuelo);
                            }
                        }
                    }
                }
            } else {
                if (num_vuelos_candidatos == 0) {
                    vuelos_candidatos = ciudad_actual;
                    mejor_coste = ciudad_actual.get_precio();
                } else {
                    if (vuelos_candidatos.get_precio() > ciudad_actual.get_precio()) {
                        vuelos_candidatos = ciudad_actual;
                        mejor_coste = ciudad_actual.get_precio();
                    }
                }
                num_vuelos_candidatos++;
            }
        }
        tiempo2 = System.nanoTime();
        tiempo3 = (tiempo2 - tiempo);
        print("\nCERCA EN PROFUNDITAT AMB PODA" + "\n");
        print("iteracions"+String.valueOf(iteraciones)+"\n");
        print("Temps invertit: " + (tiempo3 / Math.pow(10, 9)) + " segons." + "\n");
        print("Nodes visitats: " + nodos_visitados + "\n");
        print("Nodes expandits: " + nodos_expandidos + "\n");
        print("El mínim cost per anar de: " + ciudad_origen + " a " + ciudad_destino + " es: ");
        Double t = tiempo3 / Math.pow(10, 9);
        Integer campo;
        Float campod;
        campod = t.floatValue();
        campo = nodos_visitados;
        campoNodovis.setText(campo.toString());
        campoNodovisTi.setText(campo.toString());
        print("\nNodes visitats: " + campo.toString() + " , ");
        campo = nodos_expandidos;
        campoNodoexp.setText(campo.toString());
        campoNodoexTi.setText(campo.toString());
        print("Nodes expandits: " + campo.toString() + " , ");
        campoTiempoeje.setText(campod.toString());
        campoTiempoejeTi.setText(campod.toString());
        print("Temps execució: " + campod.toString() + "\n");
        elegir_mejor_alternativa_coste(vuelos_candidatos);
    }

    private void busqueda_prof_poda_tiempo(String ciudad_origen, String ciudad_destino) throws ParseException {
        double tiempo, tiempo2, tiempo3;
        Pila_ciudades p = new Pila_ciudades();
        int pos_ciudad_or;
        int iteraciones = 0;
        int num_vuelos_candidatos = 0;
        long mejor_tiempo = 2100000000;
        boolean pasar;
        Vuelo sig_vuelo;
        boolean ciclo;
        Elemento ciudad_actual;
        int nodos_visitados = 0, nodos_expandidos = 0;
        Date hora_llegada_origen = new Date();
        String[] lista_ciudades = new String[100];
        for (int i = 0; i < 100; i++) {
            lista_ciudades[i] = "";
        }
        Vuelo[] lista_vuelos = new Vuelo[100];
        for (int i = 0; i < 100; i++) {
            lista_vuelos[i] = null;
        }
        Elemento vuelos_candidatos = null;
        Ciudad origen3 = ciudades[posicion_ciudad2(ciudad_origen)];
        lista_ciudades[0] = ciudad_origen;
        lista_vuelos[0] = null;
        Vuelo[] lista_vuelos_obtenida = new Vuelo[100];
        String[] lista_ciudades_obtenida = new String[100];
        nodos_expandidos++;
        tiempo = System.nanoTime();
        p.añadir_pila(origen3.getnombre(), origen3.getcx(), origen3.getcy(), hora_llegada_origen, 0, lista_ciudades, lista_vuelos);
        while (p.Vacia() == false) {
            iteraciones++;
            ciudad_actual = p.quitar_pila();
            nodos_visitados++;
            if (!ciudad_actual.getnombre().equals(ciudad_destino)) {
                pos_ciudad_or = posicion_ciudad2(ciudad_actual.getnombre());
                for (int i = ciudades_creadas - 1; i >= 0; i--) {
                    if (listaVuelos[pos_ciudad_or][i].Vacia() == false) {
                        ciclo = hay_ciclo(ciudad_actual.get_ciudades(), ciudades[i].getnombre());
                        if (ciclo == false) {
                            sig_vuelo = listaVuelos[pos_ciudad_or][i].primero();
                            for (int z = 0; z < listaVuelos[pos_ciudad_or][i].numero_vuelos(); z++) {
                                pasar = false;
                                if (iteraciones == 1) {
                                    pasar = true;
                                } else {
                                    if ((ciudad_actual.get_horalleg().getTime() - ciudad_actual.get_primer_vuelo().getTime()) < mejor_tiempo) {
                                        pasar = true;
                                    }
                                }
                                if (sig_vuelo.get_horasal().after(ciudad_actual.get_horalleg()) && pasar) {
                                    int posicion_array = 0;                                                                      
                                    System.arraycopy(ciudad_actual.get_vuelos(), 0, lista_vuelos_obtenida, 0, ciudad_actual.get_vuelos().length);
                                    System.arraycopy(ciudad_actual.get_ciudades(), 0, lista_ciudades_obtenida, 0, ciudad_actual.get_ciudades().length);
                                    while (!lista_ciudades_obtenida[posicion_array].equals("")) {
                                        posicion_array++;
                                    }
                                    lista_ciudades_obtenida[posicion_array] = ciudades[i].getnombre();
                                    lista_vuelos_obtenida[posicion_array] = sig_vuelo;
                                    nodos_expandidos++;
                                    if (iteraciones == 1) {
                                        p.añadir_pila_tiempo(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida, sig_vuelo.get_horasal(), sig_vuelo.get_horalleg().getTime() - sig_vuelo.get_horasal().getTime());
                                    } else {
                                        p.añadir_pila_tiempo(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida, ciudad_actual.get_primer_vuelo(), sig_vuelo.get_horalleg().getTime() - ciudad_actual.get_primer_vuelo().getTime());
                                    }
                                }
                                sig_vuelo = listaVuelos[pos_ciudad_or][i].siguiente_vuelo(sig_vuelo);
                            }
                        }
                    }
                }
            } else {
                if (num_vuelos_candidatos == 0) {
                    vuelos_candidatos = ciudad_actual;
                    mejor_tiempo = ciudad_actual.get_tiempo_acum();
                } else {
                    if (vuelos_candidatos.get_tiempo_acum() > ciudad_actual.get_tiempo_acum()) {
                        vuelos_candidatos = ciudad_actual;
                        mejor_tiempo = ciudad_actual.get_tiempo_acum();
                    }
                }

                num_vuelos_candidatos++;
            }
        }
        tiempo2 = System.nanoTime();
        tiempo3 = (tiempo2 - tiempo);
        print("\nCERCA EN PROFUNDITAT AMB PODA" + "\n");
        print(String.valueOf(iteraciones));
        print("Temps invertit: " + (tiempo3 / Math.pow(10, 9)) + " segons." + "\n");
        print("Nodes visitats: " + nodos_visitados + "\n");
        print("Nodes expandits: " + nodos_expandidos + "\n");
        print("El mínim cost per anar de: " + ciudad_origen + " a " + ciudad_destino + " es: ");
        Double t = tiempo3 / Math.pow(10, 9);
        Integer campo;
        Float campod;
        campod = t.floatValue();
        campo = nodos_visitados;
        campoNodovis.setText(campo.toString());
        campoNodovisTi.setText(campo.toString());
        print("\nNodes visitats: " + campo.toString() + " , ");
        campo = nodos_expandidos;
        campoNodoexp.setText(campo.toString());
        campoNodoexTi.setText(campo.toString());
        print("Nodes expandits: " + campo.toString() + " , ");
        campoTiempoeje.setText(campod.toString());
        campoTiempoejeTi.setText(campod.toString());
        print("Temps d'execució: " + campod.toString() + "\n");
        elegir_mejor_alternativa_tiempo_nueva(vuelos_candidatos);
    }

    private void busqueda_costo_uniforme_coste(String ciudad_origen, String ciudad_destino) throws ParseException {
        double tiempo, tiempo2, tiempo3;
        Cola_ciudades c = new Cola_ciudades();
        int pos_ciudad_or;
        int iteraciones = 0;
        int num_vuelos_candidatos = 0;
        Vuelo sig_vuelo;
        boolean ciclo;
        boolean acabar = false;
        int nodos_visitados = 0, nodos_expandidos = 0;
        Elemento ciudad_actual;
        Date hora_llegada_origen = new Date();
        String[] lista_ciudades = new String[100];
        for (int i = 0; i < 100; i++) {
            lista_ciudades[i] = "";
        }
        Vuelo[] lista_vuelos = new Vuelo[100];
        for (int i = 0; i < 100; i++) {
            lista_vuelos[i] = null;
        }
        Elemento vuelos_candidatos = null;
        Ciudad origen4 = ciudades[posicion_ciudad2(ciudad_origen)];
        lista_ciudades[0] = ciudad_origen;
        lista_vuelos[0] = null;
        Vuelo[] lista_vuelos_obtenida = new Vuelo[100];
        String[] lista_ciudades_obtenida = new String[100];
        nodos_expandidos++;
        tiempo = System.nanoTime();
        c.añadir_cola_costee(origen4.getnombre(), origen4.getcx(), origen4.getcy(), hora_llegada_origen, 0, lista_ciudades, lista_vuelos);
        while (c.Vacia() == false && !acabar) {
            iteraciones++;
            ciudad_actual = c.quitar_cola_coste();
            nodos_visitados++;
            if (!ciudad_actual.getnombre().equals(ciudad_destino)) {
                pos_ciudad_or = posicion_ciudad2(ciudad_actual.getnombre());
                for (int i = ciudades_creadas - 1; i >= 0; i--) {
                    if (listaVuelos[pos_ciudad_or][i].Vacia() == false) {
                        ciclo = hay_ciclo(ciudad_actual.get_ciudades(), ciudades[i].getnombre());
                        if (ciclo == false) {
                            sig_vuelo = listaVuelos[pos_ciudad_or][i].primero();
                            for (int z = 0; z < listaVuelos[pos_ciudad_or][i].numero_vuelos(); z++) {
                                if (sig_vuelo.get_horasal().after(ciudad_actual.get_horalleg())) {
                                    int posicion_array = 0;
                                    System.arraycopy(ciudad_actual.get_vuelos(), 0, lista_vuelos_obtenida, 0, ciudad_actual.get_vuelos().length);
                                    System.arraycopy(ciudad_actual.get_ciudades(), 0, lista_ciudades_obtenida, 0, ciudad_actual.get_ciudades().length);
                                    while (!lista_ciudades_obtenida[posicion_array].equals("")) {
                                        posicion_array++;
                                    }
                                    lista_ciudades_obtenida[posicion_array] = ciudades[i].getnombre();
                                    lista_vuelos_obtenida[posicion_array] = sig_vuelo;
                                    nodos_expandidos++;
                                    c.añadir_cola_costee(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida);

                                }
                                sig_vuelo = listaVuelos[pos_ciudad_or][i].siguiente_vuelo(sig_vuelo);
                            }
                        }
                    }
                }
            } else {
                if (num_vuelos_candidatos == 0) {
                    vuelos_candidatos = ciudad_actual;
                } else {
                    if (vuelos_candidatos.get_precio() > ciudad_actual.get_precio()) {
                        vuelos_candidatos = ciudad_actual;
                    }
                }
                num_vuelos_candidatos++;
                acabar = true;
            }
        }
        tiempo2 = System.nanoTime();
        tiempo3 = (tiempo2 - tiempo);
        print("\nCERCA DE COST UNIFORME\n");
        print(String.valueOf(iteraciones));
        print("Temps invertit: " + (tiempo3 / Math.pow(10, 9)) + " segons." + "\n");
        print("Nodes visitats: " + nodos_visitados + "\n");
        print("Nodes expandits: " + nodos_expandidos + "\n");
        print("El mínim cost per anar de: " + ciudad_origen + " a " + ciudad_destino + " es: ");
        Double t = tiempo3 / Math.pow(10, 9);
        Integer campo;
        Float campod;
        campod = t.floatValue();
        campo = nodos_visitados;
        campoNodovis.setText(campo.toString());
        campoNodovisTi.setText(campo.toString());
        print("\nNodes visitats: " + campo.toString() + " , ");
        campo = nodos_expandidos;
        campoNodoexp.setText(campo.toString());
        campoNodoexTi.setText(campo.toString());
        print("Nodes expandits: " + campo.toString() + " , ");
        campoTiempoeje.setText(campod.toString());
        campoTiempoejeTi.setText(campod.toString());
        print("Temps d'execució: " + campod.toString() + "\n");
        elegir_mejor_alternativa_coste(vuelos_candidatos);
    }

    private void busqueda_costo_uniforme_tiempo(String ciudad_origen, String ciudad_destino) throws ParseException {
        double tiempo, tiempo2, tiempo3;
        Cola_ciudades c = new Cola_ciudades();
        int pos_ciudad_or;
        int iteraciones = 0;
        int num_vuelos_candidatos = 0;
        Vuelo sig_vuelo;
        boolean ciclo;
        boolean acabar = false;
        int nodos_visitados = 0, nodos_expandidos = 0;
        Elemento ciudad_actual;
        Date hora_llegada_origen = new Date();
        String[] lista_ciudades = new String[100];
        for (int i = 0; i < 100; i++) {
            lista_ciudades[i] = "";
        }
        Vuelo[] lista_vuelos = new Vuelo[100];
        for (int i = 0; i < 100; i++) {
            lista_vuelos[i] = null;
        }
        Elemento vuelos_candidatos = null;
        Ciudad ciu_origen = ciudades[posicion_ciudad2(ciudad_origen)];
        lista_ciudades[0] = ciudad_origen;
        lista_vuelos[0] = null;
        Vuelo[] lista_vuelos_obtenida = new Vuelo[100];
        String[] lista_ciudades_obtenida = new String[100];
        nodos_expandidos++;
        tiempo = System.nanoTime();
        c.añadir_cola_tiempoo(ciu_origen.getnombre(), ciu_origen.getcx(), ciu_origen.getcy(), hora_llegada_origen, 0, lista_ciudades, lista_vuelos, null, 0);
        while (c.Vacia() == false && !acabar) {
            iteraciones++;
            ciudad_actual = c.quitar_cola_tiempo();
            nodos_visitados++;
            if (!ciudad_actual.getnombre().equals(ciudad_destino)) {
                pos_ciudad_or = posicion_ciudad2(ciudad_actual.getnombre());
                for (int i = ciudades_creadas - 1; i >= 0; i--) {
                    if (listaVuelos[pos_ciudad_or][i].Vacia() == false) {
                        ciclo = hay_ciclo(ciudad_actual.get_ciudades(), ciudades[i].getnombre());
                        if (ciclo == false) {
                            sig_vuelo = listaVuelos[pos_ciudad_or][i].primero();
                            for (int z = 0; z < listaVuelos[pos_ciudad_or][i].numero_vuelos(); z++) {
                                if (sig_vuelo.get_horasal().after(ciudad_actual.get_horalleg())) {
                                    int posicion_array = 0;
                                    System.arraycopy(ciudad_actual.get_vuelos(), 0, lista_vuelos_obtenida, 0, ciudad_actual.get_vuelos().length);
                                    System.arraycopy(ciudad_actual.get_ciudades(), 0, lista_ciudades_obtenida, 0, ciudad_actual.get_ciudades().length);
                                    while (!lista_ciudades_obtenida[posicion_array].equals("")) {
                                        posicion_array++;
                                    }
                                    lista_ciudades_obtenida[posicion_array] = ciudades[i].getnombre();
                                    lista_vuelos_obtenida[posicion_array] = sig_vuelo;
                                    nodos_expandidos++;
                                    if (iteraciones == 1) {
                                        c.añadir_cola_tiempoo(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida, sig_vuelo.get_horasal(), sig_vuelo.get_horalleg().getTime() - sig_vuelo.get_horasal().getTime());
                                    } else {
                                        c.añadir_cola_tiempoo(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida, ciudad_actual.get_primer_vuelo(), sig_vuelo.get_horalleg().getTime() - ciudad_actual.get_primer_vuelo().getTime());
                                    }
                                }
                                sig_vuelo = listaVuelos[pos_ciudad_or][i].siguiente_vuelo(sig_vuelo);
                            }
                        }
                    }
                }
            } else {
                if (num_vuelos_candidatos == 0) {
                    vuelos_candidatos = ciudad_actual;
                } else {
                    if (vuelos_candidatos.get_tiempo_acum() > ciudad_actual.get_tiempo_acum()) {
                        vuelos_candidatos = ciudad_actual;
                    }
                }
                num_vuelos_candidatos++;
                acabar = true;
            }
        }
        tiempo2 = System.nanoTime();
        tiempo3 = (tiempo2 - tiempo);
        print("\nCERCA DE COST UNIFORME" + "\n");
        print(String.valueOf(iteraciones));
        print("Temps invertit: " + (tiempo3 / Math.pow(10, 9)) + " segons." + "\n");
        print("Nodes visitats: " + nodos_visitados + "\n");
        print("Nodes expandits: " + nodos_expandidos + "\n");
        print("El mínim cost per anar de: " + ciudad_origen + " a " + ciudad_destino + " es: ");
        Double t = tiempo3 / Math.pow(10, 9);
        Integer campo;
        Float campod;
        campod = t.floatValue();
        campo = nodos_visitados;
        campoNodovis.setText(campo.toString());
        campoNodovisTi.setText(campo.toString());
        print("\nNodes visitats: " + campo.toString() + " , ");
        campo = nodos_expandidos;
        campoNodoexp.setText(campo.toString());
        campoNodoexTi.setText(campo.toString());
        print("Nodes expandits: " + campo.toString() + " , ");
        campoTiempoeje.setText(campod.toString());
        campoTiempoejeTi.setText(campod.toString());
        print("Temps execució: " + campod.toString() + "\n");
        elegir_mejor_alternativa_tiempo_nueva(vuelos_candidatos);
    }

    private void busqueda_vecino_mas_proximo(String ciudad_origen, String ciudad_destino, int tipus) throws ParseException {
        double tiempo, tiempo2, tiempo3;
        Pila_ciudades p = new Pila_ciudades();
        Cola_ciudades cola_ordenacion_local;
        int pos_ciudad_or;
        int iteraciones = 0;
        int num_vuelos_candidatos = 0;
        int nodos_visitados = 0, nodos_expandidos = 0;
        Vuelo sig_vuelo;
        boolean ciclo;
        boolean acabar = false;
        Elemento ciudad_actual;
        Elemento proxima_ciudad;
        Date hora_llegada_origen = new Date();
        String[] lista_ciudades = new String[100];
        for (int i = 0; i < 100; i++) {
            lista_ciudades[i] = "";
        }
        Vuelo[] lista_vuelos = new Vuelo[100];
        for (int i = 0; i < 100; i++) {
            lista_vuelos[i] = null;
        }
        Elemento vuelos_candidatos = null;
        Ciudad origen6 = ciudades[posicion_ciudad2(ciudad_origen)];
        lista_ciudades[0] = ciudad_origen;
        lista_vuelos[0] = null;
        Vuelo[] lista_vuelos_obtenida = new Vuelo[100];
        String[] lista_ciudades_obtenida = new String[100];
        nodos_expandidos++;
        tiempo = System.nanoTime();
        p.añadir_pila(origen6.getnombre(), origen6.getcx(), origen6.getcy(), hora_llegada_origen, 0, lista_ciudades, lista_vuelos);
        while (p.Vacia() == false && !acabar) {
            iteraciones++;
            ciudad_actual = p.quitar_pila();
            nodos_visitados++;
            if (!ciudad_actual.getnombre().equals(ciudad_destino)) {
                pos_ciudad_or = posicion_ciudad2(ciudad_actual.getnombre());
                cola_ordenacion_local = new Cola_ciudades();
                for (int i = ciudades_creadas - 1; i >= 0; i--) {
                    if (listaVuelos[pos_ciudad_or][i].Vacia() == false) {
                        ciclo = hay_ciclo(ciudad_actual.get_ciudades(), ciudades[i].getnombre());
                        if (ciclo == false) {
                            sig_vuelo = listaVuelos[pos_ciudad_or][i].primero();
                            for (int z = 0; z < listaVuelos[pos_ciudad_or][i].numero_vuelos(); z++) {
                                if (sig_vuelo.get_horasal().after(ciudad_actual.get_horalleg())) {
                                    int posicion_array = 0;                                    
                                    System.arraycopy(ciudad_actual.get_vuelos(), 0, lista_vuelos_obtenida, 0, ciudad_actual.get_vuelos().length);
                                    System.arraycopy(ciudad_actual.get_ciudades(), 0, lista_ciudades_obtenida, 0, ciudad_actual.get_ciudades().length);
                                    
                                    while (!lista_ciudades_obtenida[posicion_array].equals("")) {
                                        posicion_array++;
                                    }
                                    lista_ciudades_obtenida[posicion_array] = ciudades[i].getnombre();
                                    lista_vuelos_obtenida[posicion_array] = sig_vuelo;
                                    if (tipus == 0) {
                                        cola_ordenacion_local.añadir_cola_coste(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida);
                                    } else {
                                        if (iteraciones == 1) {
                                            cola_ordenacion_local.añadir_cola_tiempo(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida, sig_vuelo.get_horasal(), sig_vuelo.get_horalleg().getTime() - sig_vuelo.get_horasal().getTime());
                                        } else {
                                            cola_ordenacion_local.añadir_cola_tiempo(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida, ciudad_actual.get_primer_vuelo(), sig_vuelo.get_horalleg().getTime() - ciudad_actual.get_primer_vuelo().getTime());
                                        }
                                    }
                                }
                                sig_vuelo = listaVuelos[pos_ciudad_or][i].siguiente_vuelo(sig_vuelo);
                            }
                        }
                    }
                }
                while (cola_ordenacion_local.Vacia() == false) {
                    proxima_ciudad = cola_ordenacion_local.quitar_cola_ultimo();
                    nodos_expandidos++;
                    p.añadir_pila_tiempo(proxima_ciudad.getnombre(), proxima_ciudad.getcx(), proxima_ciudad.getcy(), proxima_ciudad.get_horalleg(), proxima_ciudad.get_precio(), proxima_ciudad.get_ciudades(), proxima_ciudad.get_vuelos(), proxima_ciudad.get_primer_vuelo(), proxima_ciudad.get_tiempo_acum());
                }
            } else {
                if (tipus == 0) {
                    if (num_vuelos_candidatos == 0) {
                        vuelos_candidatos = ciudad_actual;
                    } else {
                        if (vuelos_candidatos.get_precio() > ciudad_actual.get_precio()) {
                            vuelos_candidatos = ciudad_actual;
                        }
                    }
                } else {
                    if (num_vuelos_candidatos == 0) {
                        vuelos_candidatos = ciudad_actual;
                    } else {
                        if (vuelos_candidatos.get_tiempo_acum() > ciudad_actual.get_tiempo_acum()) {
                            vuelos_candidatos = ciudad_actual;
                        }
                    }
                }
                acabar = true;
                num_vuelos_candidatos++;
            }
        }
        tiempo2 = System.nanoTime();
        tiempo3 = (tiempo2 - tiempo);
        print("\nCERCA DEL VEÍ MÉS PRÒXIM\n");
        print(String.valueOf(iteraciones));
        print("Temps invertit: " + (tiempo3 / Math.pow(10, 9)) + " segons." + "\n");
        print("Nodes visitats: " + nodos_visitados + "\n");
        print("Nodes expandits: " + nodos_expandidos + "\n");
        print("El mínim cost per anar de: " + ciudad_origen + " a " + ciudad_destino + " es: ");
        Double t = tiempo3 / Math.pow(10, 9);
        Integer campo;
        Float campod;
        campod = t.floatValue();
        campo = nodos_visitados;
        campoNodovis.setText(campo.toString());
        campoNodovisTi.setText(campo.toString());
        print("\nNodes visitats: " + campo.toString() + " , ");
        campo = nodos_expandidos;
        campoNodoexp.setText(campo.toString());
        campoNodoexTi.setText(campo.toString());
        print("Nodes expandits: " + campo.toString() + " , ");
        campoTiempoeje.setText(campod.toString());
        campoTiempoejeTi.setText(campod.toString());
        print("Temps execució: " + campod.toString() + "\n");
        if (tipus == 0) {
            elegir_mejor_alternativa_coste(vuelos_candidatos);
        } else {
            elegir_mejor_alternativa_tiempo_nueva(vuelos_candidatos);
        }

    }

    private int vuelos_desde_ciudad(String ciudad_actual, String ciudad_destino) {
        if (ciudad_actual.equals(ciudad_destino)) {
            return 1000;
        } else {
            int num_vuelos = 0;
            for (int j = 0; j < ciudades_creadas; j++) {
                num_vuelos = num_vuelos + listaVuelos[posicion_ciudad(ciudad_actual)][j].numero_vuelos();
            }
            return num_vuelos;
        }
    }

    private void busqueda_a_estrella_cost(String ciudad_origen, String ciudad_destino) throws ParseException {
        double tiempo, tiempo2, tiempo3;
        Cola_ciudades c = new Cola_ciudades();
        int pos_ciudad_or;
        int iteraciones = 0;
        Vuelo sig_vuelo;
        boolean ciclo;
        int nodos_visitados = 0, nodos_expandidos = 0;
        boolean acabar = false;
        Elemento ciudad_actual;
        Date hora_llegada_origen = new Date();
        String[] lista_ciudades = new String[100];
        for (int i = 0; i < 100; i++) {
            lista_ciudades[i] = "";
        }
        Vuelo[] lista_vuelos = new Vuelo[100];
        for (int i = 0; i < 100; i++) {
            lista_vuelos[i] = null;
        }
        Elemento vuelos_candidatos = null;
        Ciudad ciu_origen = ciudades[posicion_ciudad2(ciudad_origen)];
        lista_ciudades[0] = ciudad_origen;
        lista_vuelos[0] = null;
        Vuelo[] lista_vuelos_obtenida = new Vuelo[100];
        String[] lista_ciudades_obtenida = new String[100];
        nodos_expandidos++;
        tiempo = System.nanoTime();
        c.añadir_cola_distanciaa(ciu_origen.getnombre(), ciu_origen.getcx(), ciu_origen.getcy(), hora_llegada_origen, 0, lista_ciudades, lista_vuelos, 0);
        while (c.Vacia() == false && !acabar) {
            iteraciones++;
            ciudad_actual = c.quitar_cola_dist();
            nodos_visitados++;
            if (!ciudad_actual.getnombre().equals(ciudad_destino)) {
                pos_ciudad_or = posicion_ciudad2(ciudad_actual.getnombre());
                for (int i = ciudades_creadas - 1; i >= 0; i--) {
                    if (listaVuelos[pos_ciudad_or][i].Vacia() == false) {
                        ciclo = hay_ciclo(ciudad_actual.get_ciudades(), ciudades[i].getnombre());
                        if (ciclo == false) {
                            sig_vuelo = listaVuelos[pos_ciudad_or][i].primero();
                            for (int z = 0; z < listaVuelos[pos_ciudad_or][i].numero_vuelos(); z++) {
                                if (sig_vuelo.get_horasal().after(ciudad_actual.get_horalleg())) {
                                    int posicion_array = 0;
                                    System.arraycopy(ciudad_actual.get_vuelos(), 0, lista_vuelos_obtenida, 0, ciudad_actual.get_vuelos().length);
                                    System.arraycopy(ciudad_actual.get_ciudades(), 0, lista_ciudades_obtenida, 0, ciudad_actual.get_ciudades().length);
                                    while (!lista_ciudades_obtenida[posicion_array].equals("")) {
                                        posicion_array++;
                                    }
                                    lista_ciudades_obtenida[posicion_array] = ciudades[i].getnombre();
                                    lista_vuelos_obtenida[posicion_array] = sig_vuelo;
                                    nodos_expandidos++;
                                    c.añadir_cola_distanciaa(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida, ciudad_actual.get_precio() + ((float) distancias[pos_ciudad_or][posicion_ciudad(ciudad_destino)] * 2));
                                }
                                sig_vuelo = listaVuelos[pos_ciudad_or][i].siguiente_vuelo(sig_vuelo);
                            }
                        }
                    }
                }
            } else {
                vuelos_candidatos = ciudad_actual;
                acabar = true;
            }
        }
        tiempo2 = System.nanoTime();
        tiempo3 = (tiempo2 - tiempo);
        print("\nCERCA DE A* 1º HEURISTICA" + "\n");
        print(String.valueOf(iteraciones));
        print("Temps invertit: " + (tiempo3 / Math.pow(10, 9)) + " segons." + "\n");
        print("Nodes visitats: " + nodos_visitados + "\n");
        print("Nodes expandits: " + nodos_expandidos + "\n");
        print("El mínim cost per anar de: " + ciudad_origen + " a " + ciudad_destino + " es: ");
        Double t = tiempo3 / Math.pow(10, 9);
        Integer campo;
        Float campod;
        campod = t.floatValue();
        campo = nodos_visitados;
        campoNodovis.setText(campo.toString());
        campoNodovisTi.setText(campo.toString());
        print("Nodes visitats: " + campo.toString() + " , ");
        campo = nodos_expandidos;
        campoNodoexp.setText(campo.toString());
        campoNodoexTi.setText(campo.toString());
        print("Nodes expandits: " + campo.toString() + " , ");
        campoTiempoeje.setText(campod.toString());
        campoTiempoejeTi.setText(campod.toString());
        print("Temps execució: " + campod.toString() + "\n");
        elegir_mejor_alternativa_coste(vuelos_candidatos);
    }

    private void busqueda_a_estrella_temps(String ciudad_origen, String ciudad_destino) throws ParseException {
        double tiempo, tiempo2, tiempo3;
        Cola_ciudades c = new Cola_ciudades();
        int pos_ciudad_or;
        int iteraciones = 0;
        int num_vuelos_candidatos = 0;
        Vuelo sig_vuelo;
        boolean ciclo;
        int nodos_visitados = 0, nodos_expandidos = 0;
        boolean acabar = false;
        Elemento ciudad_actual;
        Date hora_llegada_origen = new Date();
        String[] lista_ciudades = new String[100];
        for (int i = 0; i < 100; i++) {
            lista_ciudades[i] = "";
        }
        Vuelo[] lista_vuelos = new Vuelo[100];
        for (int i = 0; i < 100; i++) {
            lista_vuelos[i] = null;
        }
        Elemento vuelos_candidatos = null;
        Ciudad ciu_origen = ciudades[posicion_ciudad2(ciudad_origen)];
        lista_ciudades[0] = ciudad_origen;
        lista_vuelos[0] = null;
        Vuelo[] lista_vuelos_obtenida = new Vuelo[100];
        String[] lista_ciudades_obtenida = new String[100];
        nodos_expandidos++;
        tiempo = System.nanoTime();
        c.añadir_cola_tiempoo(ciu_origen.getnombre(), ciu_origen.getcx(), ciu_origen.getcy(), hora_llegada_origen, 0, lista_ciudades, lista_vuelos, null, 0);
        while (c.Vacia() == false && !acabar) {
            iteraciones++;
            ciudad_actual = c.quitar_cola_dist();
            nodos_visitados++;
            if (!ciudad_actual.getnombre().equals(ciudad_destino)) {
                pos_ciudad_or = posicion_ciudad2(ciudad_actual.getnombre());
                for (int i = ciudades_creadas - 1; i >= 0; i--) {
                    if (listaVuelos[pos_ciudad_or][i].Vacia() == false) {
                        ciclo = hay_ciclo(ciudad_actual.get_ciudades(), ciudades[i].getnombre());
                        if (ciclo == false) {
                            sig_vuelo = listaVuelos[pos_ciudad_or][i].primero();
                            for (int z = 0; z < listaVuelos[pos_ciudad_or][i].numero_vuelos(); z++) {
                                if (sig_vuelo.get_horasal().after(ciudad_actual.get_horalleg())) {
                                    int posicion_array = 0;
                                    System.arraycopy(ciudad_actual.get_vuelos(), 0, lista_vuelos_obtenida, 0, ciudad_actual.get_vuelos().length);
                                    System.arraycopy(ciudad_actual.get_ciudades(), 0, lista_ciudades_obtenida, 0, ciudad_actual.get_ciudades().length);
                                    while (!lista_ciudades_obtenida[posicion_array].equals("")) {
                                        posicion_array++;
                                    }
                                    lista_ciudades_obtenida[posicion_array] = ciudades[i].getnombre();
                                    lista_vuelos_obtenida[posicion_array] = sig_vuelo;
                                    if (iteraciones == 1) {
                                        nodos_expandidos++;
                                        c.añadir_cola_distanciaa2(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida, sig_vuelo.get_horasal(), distancias[pos_ciudad_or][posicion_ciudad(ciudad_destino)] * 120000);
                                    } else {
                                        nodos_expandidos++;
                                        c.añadir_cola_distanciaa2(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida, ciudad_actual.get_primer_vuelo(), (sig_vuelo.get_horasal().getTime() - ciudad_actual.get_primer_vuelo().getTime()) + (distancias[pos_ciudad_or][posicion_ciudad(ciudad_destino)] * 120000));
                                    }
                                }
                                sig_vuelo = listaVuelos[pos_ciudad_or][i].siguiente_vuelo(sig_vuelo);
                            }
                        }
                    }
                }
            } else {
                if (num_vuelos_candidatos == 0) {
                    vuelos_candidatos = ciudad_actual;
                } else {
                    if (vuelos_candidatos.get_precio() > ciudad_actual.get_precio()) {
                        vuelos_candidatos = ciudad_actual;
                    }
                }
                num_vuelos_candidatos++;
                acabar = true;
            }
        }
        tiempo2 = System.nanoTime();
        tiempo3 = (tiempo2 - tiempo);
        print("\nCERCA EN A* 1º HEURISTICA\n");
        print(String.valueOf(iteraciones));
        print("Temps invertit: " + (tiempo3 / Math.pow(10, 9)) + " segons." + "\n");
        print("Nodes visitats: " + nodos_visitados + "\n");
        print("Nodes expandits: " + nodos_expandidos + "\n");
        print("El mínim cost per anar de: " + ciudad_origen + " a " + ciudad_destino + " es: ");
        Double t = tiempo3 / Math.pow(10, 9);
        Integer campo;
        Float campod;
        campod = t.floatValue();
        campo = nodos_visitados;
        campoNodovis.setText(campo.toString());
        campoNodovisTi.setText(campo.toString());
        print("Nodes visitats: " + campo.toString() + " , ");
        campo = nodos_expandidos;
        campoNodoexp.setText(campo.toString());
        campoNodoexTi.setText(campo.toString());
        print("Nodes expandits: " + campo.toString() + " , ");
        campoTiempoeje.setText(campod.toString());
        campoTiempoejeTi.setText(campod.toString());
        print("Temps execució: " + campod.toString() + "\n");
        elegir_mejor_alternativa_tiempo_nueva(vuelos_candidatos);
    }

    private void busqueda_a_estrella2_cost(String ciudad_origen, String ciudad_destino) throws ParseException {
        double tiempo, tiempo2, tiempo3;
        Cola_ciudades c = new Cola_ciudades();
        int pos_ciudad_or;
        int iteraciones = 0;
        int num_vuelos_candidatos = 0;
        Vuelo sig_vuelo;
        boolean ciclo;
        int nodos_visitados = 0, nodos_expandidos = 0;
        boolean acabar = false;
        Elemento ciudad_actual;
        Date hora_llegada_origen = new Date();
        String[] lista_ciudades = new String[100];
        for (int i = 0; i < 100; i++) {
            lista_ciudades[i] = "";
        }
        Vuelo[] lista_vuelos = new Vuelo[100];
        for (int i = 0; i < 100; i++) {
            lista_vuelos[i] = null;
        }
        Elemento vuelos_candidatos = null;
        Ciudad ciu_origen = ciudades[posicion_ciudad2(ciudad_origen)];
        lista_ciudades[0] = ciudad_origen;
        lista_vuelos[0] = null;
        Vuelo[] lista_vuelos_obtenida = new Vuelo[100];
        String[] lista_ciudades_obtenida = new String[100];
        nodos_expandidos++;
        tiempo = System.nanoTime();
        c.añadir_cola_distanciaa(ciu_origen.getnombre(), ciu_origen.getcx(), ciu_origen.getcy(), hora_llegada_origen, 0, lista_ciudades, lista_vuelos, 0);
        while (c.Vacia() == false && !acabar) {
            iteraciones++;
            ciudad_actual = c.quitar_cola_dist();
            nodos_visitados++;
            if (!ciudad_actual.getnombre().equals(ciudad_destino)) {
                pos_ciudad_or = posicion_ciudad2(ciudad_actual.getnombre());
                for (int i = ciudades_creadas - 1; i >= 0; i--) {
                    if (listaVuelos[pos_ciudad_or][i].Vacia() == false) {
                        ciclo = hay_ciclo(ciudad_actual.get_ciudades(), ciudades[i].getnombre());
                        if (ciclo == false) {
                            sig_vuelo = listaVuelos[pos_ciudad_or][i].primero();
                            for (int z = 0; z < listaVuelos[pos_ciudad_or][i].numero_vuelos(); z++) {
                                if (sig_vuelo.get_horasal().after(ciudad_actual.get_horalleg())) {
                                    int posicion_array = 0;
                                    System.arraycopy(ciudad_actual.get_vuelos(), 0, lista_vuelos_obtenida, 0, ciudad_actual.get_vuelos().length);
                                    System.arraycopy(ciudad_actual.get_ciudades(), 0, lista_ciudades_obtenida, 0, ciudad_actual.get_ciudades().length);
                                    while (!lista_ciudades_obtenida[posicion_array].equals("")) {
                                        posicion_array++;
                                    }
                                    lista_ciudades_obtenida[posicion_array] = ciudades[i].getnombre();
                                    lista_vuelos_obtenida[posicion_array] = sig_vuelo;
                                    nodos_expandidos++;
                                    c.añadir_cola_distanciaa(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida, ciudad_actual.get_precio() + sig_vuelo.get_precio() - (vuelos_desde_ciudad(ciudades[i].getnombre(), ciudad_destino) * 0.14));
                                }
                                sig_vuelo = listaVuelos[pos_ciudad_or][i].siguiente_vuelo(sig_vuelo);
                            }
                        }
                    }
                }
            } else {
                if (num_vuelos_candidatos == 0) {
                    vuelos_candidatos = ciudad_actual;
                } else {
                    if (vuelos_candidatos.get_precio() > ciudad_actual.get_precio()) {
                        vuelos_candidatos = ciudad_actual;
                    }
                }
                num_vuelos_candidatos++;
                acabar = true;
            }
        }
        tiempo2 = System.nanoTime();
        tiempo3 = (tiempo2 - tiempo);
        print("\nCERCA EN A* 2º HEURISTICA\n");
        print(String.valueOf(iteraciones));
        print("Temps invertit: " + (tiempo3 / Math.pow(10, 9)) + " segons." + "\n");
        print("Nodes visitats: " + nodos_visitados + "\n");
        print("Nodes expandits: " + nodos_expandidos + "\n");
        print("El mínim cost per anar de: " + ciudad_origen + " a " + ciudad_destino + " es: ");
        Double t = tiempo3 / Math.pow(10, 9);
        Integer campo;
        Float campod;
        campod = t.floatValue();
        campo = nodos_visitados;
        campoNodovis.setText(campo.toString());
        campoNodovisTi.setText(campo.toString());
        print("Nodes visitats: " + campo.toString() + " , ");
        campo = nodos_expandidos;
        campoNodoexp.setText(campo.toString());
        campoNodoexTi.setText(campo.toString());
        print("Nodes expandits: " + campo.toString() + " , ");
        campoTiempoeje.setText(campod.toString());
        campoTiempoejeTi.setText(campod.toString());
        print("Temps execució: " + campod.toString() + "\n");
        elegir_mejor_alternativa_coste(vuelos_candidatos);
    }

    private  void busqueda_a_estrella2_temps(String ciudad_origen, String ciudad_destino) throws ParseException {
        double tiempo, tiempo2, tiempo3;
        Cola_ciudades c = new Cola_ciudades();
        int pos_ciudad_or;
        int iteraciones = 0;
        int num_vuelos_candidatos = 0;
        Vuelo sig_vuelo;
        boolean ciclo;
        int nodos_visitados = 0, nodos_expandidos = 0;
        boolean acabar = false;
        Elemento ciudad_actual;
        Date hora_llegada_origen = new Date();
        String[] lista_ciudades = new String[100];
        for (int i = 0; i < 100; i++) {
            lista_ciudades[i] = "";
        }
        Vuelo[] lista_vuelos = new Vuelo[100];
        for (int i = 0; i < 100; i++) {
            lista_vuelos[i] = null;
        }
        Elemento vuelos_candidatos = null;
        Ciudad origen12 = ciudades[posicion_ciudad2(ciudad_origen)];
        lista_ciudades[0] = ciudad_origen;
        lista_vuelos[0] = null;
        Vuelo[] lista_vuelos_obtenida = new Vuelo[100];
        String[] lista_ciudades_obtenida = new String[100];
        nodos_expandidos++;
        tiempo = System.nanoTime();
        c.añadir_cola_tiempoo(origen12.getnombre(), origen12.getcx(), origen12.getcy(), hora_llegada_origen, 0, lista_ciudades, lista_vuelos, null, 0);
        while (c.Vacia() == false && !acabar) {
            iteraciones++;
            ciudad_actual = c.quitar_cola_dist();
            nodos_visitados++;
            if (!ciudad_actual.getnombre().equals(ciudad_destino)) {
                pos_ciudad_or = posicion_ciudad2(ciudad_actual.getnombre());
                for (int i = ciudades_creadas - 1; i >= 0; i--) {
                    if (listaVuelos[pos_ciudad_or][i].Vacia() == false) {
                        ciclo = hay_ciclo(ciudad_actual.get_ciudades(), ciudades[i].getnombre());
                        if (ciclo == false) {
                            sig_vuelo = listaVuelos[pos_ciudad_or][i].primero();
                            for (int z = 0; z < listaVuelos[pos_ciudad_or][i].numero_vuelos(); z++) {
                                if (sig_vuelo.get_horasal().after(ciudad_actual.get_horalleg())) {
                                    int posicion_array = 0;
                                    System.arraycopy(ciudad_actual.get_vuelos(), 0, lista_vuelos_obtenida, 0, ciudad_actual.get_vuelos().length);
                                    System.arraycopy(ciudad_actual.get_ciudades(), 0, lista_ciudades_obtenida, 0, ciudad_actual.get_ciudades().length);
                                    while (!lista_ciudades_obtenida[posicion_array].equals("")) {
                                        posicion_array++;
                                    }
                                    lista_ciudades_obtenida[posicion_array] = ciudades[i].getnombre();
                                    lista_vuelos_obtenida[posicion_array] = sig_vuelo;
                                    if (iteraciones == 1) {
                                        nodos_expandidos++;
                                        c.añadir_cola_distanciaa2(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida, sig_vuelo.get_horasal(), -vuelos_desde_ciudad(ciudades[i].getnombre(), ciudad_destino) * 3000);
                                    } else {
                                        nodos_expandidos++;
                                        c.añadir_cola_distanciaa2(ciudades[i].getnombre(), ciudades[i].getcx(), ciudades[i].getcy(), sig_vuelo.get_horalleg(), ciudad_actual.get_precio() + sig_vuelo.get_precio(), lista_ciudades_obtenida, lista_vuelos_obtenida, ciudad_actual.get_primer_vuelo(), (sig_vuelo.get_horasal().getTime() - ciudad_actual.get_primer_vuelo().getTime()) - (vuelos_desde_ciudad(ciudades[i].getnombre(), ciudad_destino) * 3000));//120000*0,07
                                    }
                                }
                                sig_vuelo = listaVuelos[pos_ciudad_or][i].siguiente_vuelo(sig_vuelo);
                            }
                        }
                    }
                }
            } else {
                if (num_vuelos_candidatos == 0) {
                    vuelos_candidatos = ciudad_actual;
                } else {
                    if (vuelos_candidatos.get_precio() > ciudad_actual.get_precio()) {
                        vuelos_candidatos = ciudad_actual;
                    }
                }
                num_vuelos_candidatos++;
                acabar = true;
            }
        }
        tiempo2 = System.nanoTime();
        tiempo3 = (tiempo2 - tiempo);
        print("\nCERCA EN A* 2º HEURISTICA" + "\n");
        print(String.valueOf(iteraciones));
        print("Temps invertit: " + (tiempo3 / Math.pow(10, 9)) + " segons." + "\n");
        print("Nodes visitats: " + nodos_visitados + "\n");
        print("Nodes expandits: " + nodos_expandidos + "\n");
        print("El mínim cost per anar de: " + ciudad_origen + " a " + ciudad_destino + " es: ");
        Double t = tiempo3 / Math.pow(10, 9);
        Integer campo;
        Float campod;
        campod = t.floatValue();
        campo = nodos_visitados;
        campoNodovis.setText(campo.toString());
        campoNodovisTi.setText(campo.toString());
        print("Nodes visitats: " + campo.toString() + " , ");
        campo = nodos_expandidos;
        campoNodoexp.setText(campo.toString());
        campoNodoexTi.setText(campo.toString());
        print("Nodes expandits: " + campo.toString() + " , ");
        campoTiempoeje.setText(campod.toString());
        campoTiempoejeTi.setText(campod.toString());
        print("Temps execució: " + campod.toString() + "\n");
        elegir_mejor_alternativa_tiempo_nueva(vuelos_candidatos);
    }
    
    private boolean hay_ciclo(String[] lista_ciudades, String ciudad_futura) {
        for (int i = 0; i < 100; i++) {
            if (lista_ciudades[i].equals(ciudad_futura)) {
                return true;
            }
        }
        return false;
    }

    private void añadir_ciudad_auto(int numero_ciudades_crear) {
        int max_coord_x = 790;
        int max_coord_y = 425;
        int coord_x;
        int coord_y;
        for (int j = 0; j < numero_ciudades_crear; j++) {
            coord_x = (int) (Math.random() * max_coord_x);
            coord_y = (int) (Math.random() * max_coord_y);
            String nombre_ciudad1 = "Ciutat-" + String.valueOf(j);
            ciudades[ciudades_creadas] = new Ciudad(nombre_ciudad1, coord_x, coord_y);
            ciudades_creadas = ciudades_creadas + 1;
            OrigenComboBox.addItem(ciudades[ciudades_creadas - 1].getnombre());
            OvueloComboBox.addItem(ciudades[ciudades_creadas - 1].getnombre());
            if (ciudades_creadas - 1 != 0) {
                DestinoComboBox.addItem(ciudades[ciudades_creadas - 1].getnombre());
            }
        }
        mundo.setNumciudades(ciudades_creadas);
        repaint();
    }

    private void añadir_vuelo_auto(int numero_vuelos_crear) throws ParseException {
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy hh:mm");
        float precio;
        Date fechaActual = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy ");
        String Fecha = formato.format(fechaActual);
        String hora_salida;
        String hora_llegada;
        String hora;
        String minuto;
        String minuto2;
        double distancia;
        int posicion_x;
        int posicion_y;
        for (int j = 0; j < numero_vuelos_crear; j++) {
            String compañia = "Companyia-" + String.valueOf(j);
            hora = String.valueOf((int) (Math.random() * 24 + 720));
            if (hora.equals("12")) {
                hora = "11";
                minuto = "60";
            } else {
                minuto = "00";
            }
            posicion_x = 0;
            posicion_y = 0;
            while (posicion_x == posicion_y) {
                posicion_x = (int) (Math.random() * ciudades_creadas);
                posicion_y = (int) (Math.random() * ciudades_creadas);
            }
            minuto = Integer.toString(Integer.valueOf(minuto) + (int) (Math.random() * 60));
            distancia = distancias[posicion_x][posicion_y];
            minuto2 = String.valueOf(Integer.parseInt(minuto) + (int) (distancia * 2));
            precio = (int) (distancia * 2);
            hora_salida = Fecha + hora + ":" + minuto;
            hora_llegada = Fecha + hora + ":" + minuto2;
            for (int i = 0; i < 5; i++) {
                listaVuelos[posicion_x][posicion_y].insertarnuevo(j, compañia, precio, df.parse(hora_salida), df.parse(hora_llegada), ciudades[posicion_x].getcx(), ciudades[posicion_x].getcy(), ciudades[posicion_y].getcx(), ciudades[posicion_y].getcy());
                minuto = Integer.toString(Integer.parseInt(minuto) + 1440);
                minuto2 = Integer.toString(Integer.parseInt(minuto2) + 1440);
                hora_salida = Fecha + hora + ":" + minuto;
                hora_llegada = Fecha + hora + ":" + minuto2;
            }
        }
    }

    private void conectar_todas_ciudades() throws ParseException {
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy hh:mm");
        float precio;
        Date fechaActual = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy ");
        String Fecha = formato.format(fechaActual);
        String hora_salida;
        String hora_llegada;
        String hora;
        String minuto;
        String minuto2;
        double distancia;
        int posicion_x;
        int posicion_y;
        for (int j = 0; j < ciudades_creadas; j++) {
            for (int k = 0; k < ciudades_creadas; k++) {
                if (j != k) {
                    String compañia = "Companyia-" + String.valueOf(j);
                    hora = String.valueOf((int) (Math.random() * 24) + 720);
                    if (hora.equals("12")) {
                        hora = "11";
                        minuto = "60";
                    } else {
                        minuto = "00";
                    }
                    posicion_x = j;
                    posicion_y = k;
                    minuto = Integer.toString(Integer.valueOf(minuto) + (int) (Math.random() * 60));
                    distancia = distancias[posicion_x][posicion_y];
                    minuto2 = String.valueOf(Integer.parseInt(minuto) + (int) (distancia * 2));
                    precio = (int) (distancia * 2);
                    hora_salida = Fecha + hora + ":" + minuto;
                    hora_llegada = Fecha + hora + ":" + minuto2;
                    for (int i = 0; i < 5; i++) {
                        listaVuelos[posicion_x][posicion_y].insertarnuevo(j, compañia, precio, df.parse(hora_salida), df.parse(hora_llegada), ciudades[posicion_x].getcx(), ciudades[posicion_x].getcy(), ciudades[posicion_y].getcx(), ciudades[posicion_y].getcy());
                        minuto = Integer.toString(Integer.parseInt(minuto) + 1440);
                        minuto2 = Integer.toString(Integer.parseInt(minuto2) + 1440);
                        hora_salida = Fecha + hora + ":" + minuto;
                        hora_llegada = Fecha + hora + ":" + minuto2;
                    }
                }
            }
        }
    }

    private void mundoMouseClicked(java.awt.event.MouseEvent evt) {
        if (evt.getButton() == MouseEvent.BUTTON3) {
            Integer numx = evt.getX();
            Integer numy = evt.getY();
            coordenadax.setText(numx.toString());
            coordenaday.setText(numy.toString());      
        } else {
            Integer numx = evt.getX();
            Integer numy = evt.getY();
            coordenadax.setText(numx.toString());
            coordenaday.setText(numy.toString());                  
            nombre_ciudad.setText("");
            DCreaCiudad = new JDialog();
            DCreaCiudad.setModal(true);
            DCreaCiudad.setTitle("Crear nova ciutat");
            DCreaCiudad.setSize(400, 200);
            DCreaCiudad.setLocationByPlatform(true);
            DCreaCiudad.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            DCreaCiudad.add(PanelCreaCiudad);
            DCreaCiudad.pack();
            DCreaCiudad.setVisible(true);
        }
    }

    private void init() {
        mundo = new MapaMundo(ciudades, listaVuelos);
        PanelMundo2 = new JPanel();
        javax.swing.GroupLayout PanelMundoLayout = new javax.swing.GroupLayout(PanelMundo2);
        PanelMundo2.setLayout(PanelMundoLayout);
        PanelMundoLayout.setHorizontalGroup(
                PanelMundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(PanelMundoLayout.createSequentialGroup().addComponent(mundo).addContainerGap(24, Short.MAX_VALUE)));
        PanelMundoLayout.setVerticalGroup(
                PanelMundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(PanelMundoLayout.createSequentialGroup().addComponent(mundo).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        ScrollMundo.setViewportView(PanelMundo2);
        mundo.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mundoMouseClicked(evt);
            }
        });
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CritVuelo = new javax.swing.ButtonGroup();
        PanelGenAle = new javax.swing.JPanel();
        CiuGen = new javax.swing.JTextField();
        label_ciugen = new javax.swing.JLabel();
        label_numvuelos = new javax.swing.JLabel();
        personalizado = new javax.swing.JRadioButton();
        todos_con_todos = new javax.swing.JRadioButton();
        texto_numvuelos = new javax.swing.JTextField();
        CreaGenAle = new javax.swing.JButton();
        btGenAleCancelar = new javax.swing.JButton();
        PanelSalidaCoste = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ResultadosCoste = new javax.swing.JTable();
        Paneldatoscoste = new javax.swing.JPanel();
        labelNodovis = new javax.swing.JLabel();
        labelNodoexp = new javax.swing.JLabel();
        labelTiempoeje = new javax.swing.JLabel();
        campoNodovis = new javax.swing.JTextField();
        campoTiempoeje = new javax.swing.JTextField();
        campoNodoexp = new javax.swing.JTextField();
        campoCostetotal = new javax.swing.JTextField();
        labelCosteTotal = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        tipo_busqueda = new javax.swing.ButtonGroup();
        PanelCreaCiudad = new javax.swing.JPanel();
        label_x = new javax.swing.JLabel();
        label_coordenadas = new javax.swing.JLabel();
        label_nombre_ciudad = new javax.swing.JLabel();
        nombre_ciudad = new javax.swing.JTextField();
        label_y = new javax.swing.JLabel();
        coordenadax = new javax.swing.JTextField();
        coordenaday = new javax.swing.JTextField();
        CreaCiudad = new javax.swing.JButton();
        btCrearCiutatCancelar = new javax.swing.JButton();
        PanelCreaVuelo = new javax.swing.JPanel();
        DvueloComboBox = new javax.swing.JComboBox();
        HoraLlegada = new javax.swing.JTextField();
        HoraSalida = new javax.swing.JTextField();
        OvueloComboBox = new javax.swing.JComboBox();
        PrecioVuelo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        CreaDestino = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        CreaOrigen = new javax.swing.JLabel();
        nombre_compañia = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        BotonCreavuelo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btCreaVueloCancelar = new javax.swing.JButton();
        Criterio = new javax.swing.ButtonGroup();
        PanelSalidaTiempo = new javax.swing.JPanel();
        Paneldatostiempo = new javax.swing.JPanel();
        campoNodovisTi = new javax.swing.JTextField();
        campoNodoexTi = new javax.swing.JTextField();
        campoTiempoejeTi = new javax.swing.JTextField();
        labelNodogen1 = new javax.swing.JLabel();
        labelNodoexp1 = new javax.swing.JLabel();
        labelTiempoeje1 = new javax.swing.JLabel();
        labelTiempototalTi = new javax.swing.JLabel();
        campoTiempotoTi = new javax.swing.JTextField();
        labelpretoti = new javax.swing.JLabel();
        campoPretoti = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        ResultadosTiempo = new javax.swing.JTable();
        btPanelSalidaTiempoSortir = new javax.swing.JButton();
        PanelAbout = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        btAboutSortir = new javax.swing.JButton();
        PanelVuelos = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TablaVuelos = new javax.swing.JTable();
        btPanellVolsSortir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextoSalida = new javax.swing.JTextArea();
        PanelBusquedas = new javax.swing.JPanel();
        profundidad_poda = new javax.swing.JRadioButton();
        precio_minimo = new javax.swing.JRadioButton();
        vecino_proximo = new javax.swing.JRadioButton();
        tiempo_minimo = new javax.swing.JRadioButton();
        busqueda_tipo = new javax.swing.JLabel();
        coste_uniforme = new javax.swing.JRadioButton();
        criterio_busqueda = new javax.swing.JLabel();
        a_estrella = new javax.swing.JRadioButton();
        OrigenComboBox = new javax.swing.JComboBox();
        profundidad = new javax.swing.JRadioButton();
        Busqueda = new javax.swing.JLabel();
        DestinoComboBox = new javax.swing.JComboBox();
        Destino = new javax.swing.JLabel();
        Origen = new javax.swing.JLabel();
        a_estrella2 = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        ScrollMundo = new javax.swing.JScrollPane();
        BotonBuscar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Menubusquedas = new javax.swing.JMenu();
        MenuNuevo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        MenuSotirItem = new javax.swing.JMenuItem();
        Menucrear = new javax.swing.JMenu();
        Menucreaciudad = new javax.swing.JMenuItem();
        Menucreavuelo = new javax.swing.JMenuItem();
        Menugenale = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        MenuItemVerVuelos = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        CiuGen.setText("2");

        label_ciugen.setText("Número de ciutats:");

        label_numvuelos.setText("Número de vols:");

        CritVuelo.add(personalizado);
        personalizado.setSelected(true);
        personalizado.setText("Personalitzat");
        personalizado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personalizadoActionPerformed(evt);
            }
        });

        CritVuelo.add(todos_con_todos);
        todos_con_todos.setText("Tots amb tots");
        todos_con_todos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                todos_con_todosActionPerformed(evt);
            }
        });

        texto_numvuelos.setText("1");

        CreaGenAle.setText("Generar");
        CreaGenAle.setSelected(true);
        CreaGenAle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreaGenAleActionPerformed(evt);
            }
        });

        btGenAleCancelar.setText("Cancel·lar");
        btGenAleCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGenAleCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelGenAleLayout = new javax.swing.GroupLayout(PanelGenAle);
        PanelGenAle.setLayout(PanelGenAleLayout);
        PanelGenAleLayout.setHorizontalGroup(
            PanelGenAleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelGenAleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelGenAleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelGenAleLayout.createSequentialGroup()
                        .addComponent(personalizado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(todos_con_todos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(102, 102, 102))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelGenAleLayout.createSequentialGroup()
                        .addComponent(btGenAleCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CreaGenAle))
                    .addGroup(PanelGenAleLayout.createSequentialGroup()
                        .addGroup(PanelGenAleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_ciugen)
                            .addComponent(label_numvuelos))
                        .addGap(12, 12, 12)
                        .addGroup(PanelGenAleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(texto_numvuelos, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                            .addComponent(CiuGen, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))))
                .addContainerGap())
        );
        PanelGenAleLayout.setVerticalGroup(
            PanelGenAleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelGenAleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelGenAleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_ciugen)
                    .addComponent(CiuGen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelGenAleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_numvuelos)
                    .addComponent(texto_numvuelos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanelGenAleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(personalizado)
                    .addComponent(todos_con_todos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelGenAleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreaGenAle)
                    .addComponent(btGenAleCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ResultadosCoste.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Origen", "Destí", "Hora sortida", "Hora arribada", "Preu"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ResultadosCoste.setShowGrid(true);
        ResultadosCoste.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ResultadosCosteMouseClicked(evt);
            }
        });
        ResultadosCoste.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                ResultadosCosteAncestorRemoved(evt);
            }
        });
        jScrollPane2.setViewportView(ResultadosCoste);
        ResultadosCoste.getColumnModel().getColumn(0).setResizable(false);
        ResultadosCoste.getColumnModel().getColumn(1).setResizable(false);
        ResultadosCoste.getColumnModel().getColumn(4).setResizable(false);

        labelNodovis.setText("Nodes visitats:");

        labelNodoexp.setText("Nodes expandits:");

        labelTiempoeje.setText("Temps d'exeució:");

        campoNodovis.setPreferredSize(new java.awt.Dimension(70, 27));

        campoTiempoeje.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        campoTiempoeje.setPreferredSize(new java.awt.Dimension(90, 27));

        campoNodoexp.setPreferredSize(new java.awt.Dimension(70, 27));

        campoCostetotal.setPreferredSize(new java.awt.Dimension(60, 27));

        labelCosteTotal.setText("Cost total:");

        javax.swing.GroupLayout PaneldatoscosteLayout = new javax.swing.GroupLayout(Paneldatoscoste);
        Paneldatoscoste.setLayout(PaneldatoscosteLayout);
        PaneldatoscosteLayout.setHorizontalGroup(
            PaneldatoscosteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PaneldatoscosteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PaneldatoscosteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelTiempoeje)
                    .addComponent(labelNodovis))
                .addGap(18, 18, 18)
                .addGroup(PaneldatoscosteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(campoTiempoeje, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(campoNodovis, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PaneldatoscosteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelNodoexp, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelCosteTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PaneldatoscosteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(campoNodoexp, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                    .addComponent(campoCostetotal, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE))
                .addContainerGap())
        );
        PaneldatoscosteLayout.setVerticalGroup(
            PaneldatoscosteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PaneldatoscosteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PaneldatoscosteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PaneldatoscosteLayout.createSequentialGroup()
                        .addGroup(PaneldatoscosteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelNodoexp)
                            .addComponent(campoNodoexp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45))
                    .addGroup(PaneldatoscosteLayout.createSequentialGroup()
                        .addGroup(PaneldatoscosteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(campoNodovis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelNodovis))
                        .addGap(18, 18, 18)
                        .addGroup(PaneldatoscosteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelTiempoeje)
                            .addComponent(campoTiempoeje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelCosteTotal)
                            .addComponent(campoCostetotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Sortir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelSalidaCosteLayout = new javax.swing.GroupLayout(PanelSalidaCoste);
        PanelSalidaCoste.setLayout(PanelSalidaCosteLayout);
        PanelSalidaCosteLayout.setHorizontalGroup(
            PanelSalidaCosteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelSalidaCosteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelSalidaCosteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Paneldatoscoste, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        PanelSalidaCosteLayout.setVerticalGroup(
            PanelSalidaCosteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelSalidaCosteLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Paneldatoscoste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        label_x.setText("X:");

        label_coordenadas.setText("Coordenades:");

        label_nombre_ciudad.setText("Nom ciutat:");

        nombre_ciudad.setColumns(8);

        label_y.setText("Y:");

        coordenadax.setColumns(4);

        coordenaday.setColumns(4);

        CreaCiudad.setText("Crear ciutat");
        CreaCiudad.setSelected(true);
        CreaCiudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreaCiudadActionPerformed(evt);
            }
        });

        btCrearCiutatCancelar.setText("Cancel·lar");
        btCrearCiutatCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCrearCiutatCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelCreaCiudadLayout = new javax.swing.GroupLayout(PanelCreaCiudad);
        PanelCreaCiudad.setLayout(PanelCreaCiudadLayout);
        PanelCreaCiudadLayout.setHorizontalGroup(
            PanelCreaCiudadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelCreaCiudadLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelCreaCiudadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_coordenadas)
                    .addGroup(PanelCreaCiudadLayout.createSequentialGroup()
                        .addComponent(label_nombre_ciudad)
                        .addGap(18, 18, 18)
                        .addComponent(nombre_ciudad, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                    .addGroup(PanelCreaCiudadLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(label_x, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(coordenadax, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_y)
                        .addGap(8, 8, 8)
                        .addComponent(coordenaday, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelCreaCiudadLayout.createSequentialGroup()
                        .addComponent(btCrearCiutatCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CreaCiudad)))
                .addContainerGap())
        );
        PanelCreaCiudadLayout.setVerticalGroup(
            PanelCreaCiudadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelCreaCiudadLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelCreaCiudadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_nombre_ciudad)
                    .addComponent(nombre_ciudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(label_coordenadas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelCreaCiudadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_x)
                    .addComponent(coordenaday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coordenadax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_y))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelCreaCiudadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreaCiudad)
                    .addComponent(btCrearCiutatCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        DvueloComboBox.setPreferredSize(new java.awt.Dimension(75, 20));
        DvueloComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DvueloComboBoxActionPerformed(evt);
            }
        });

        HoraLlegada.setText("01:00");

        HoraSalida.setText("00:00");

        OvueloComboBox.setPreferredSize(new java.awt.Dimension(75, 20));
        OvueloComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OvueloComboBoxActionPerformed(evt);
            }
        });

        PrecioVuelo.setColumns(4);
        PrecioVuelo.setText("0");

        jLabel2.setText("Hora arribada:");

        jLabel4.setText("€");

        CreaDestino.setText("Destí:");

        jLabel3.setText("Preu:");

        CreaOrigen.setText("Origen:");

        nombre_compañia.setColumns(8);

        jLabel11.setText("Nom companyia:");

        BotonCreavuelo.setText("Crear vol");
        BotonCreavuelo.setSelected(true);
        BotonCreavuelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCreavueloActionPerformed(evt);
            }
        });

        jLabel1.setText("Hora sortida:");

        btCreaVueloCancelar.setText("Cancel·lar");
        btCreaVueloCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCreaVueloCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelCreaVueloLayout = new javax.swing.GroupLayout(PanelCreaVuelo);
        PanelCreaVuelo.setLayout(PanelCreaVueloLayout);
        PanelCreaVueloLayout.setHorizontalGroup(
            PanelCreaVueloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelCreaVueloLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelCreaVueloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelCreaVueloLayout.createSequentialGroup()
                        .addComponent(CreaOrigen)
                        .addGap(18, 18, 18)
                        .addComponent(OvueloComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CreaDestino)
                        .addGap(11, 11, 11)
                        .addComponent(DvueloComboBox, 0, 183, Short.MAX_VALUE))
                    .addGroup(PanelCreaVueloLayout.createSequentialGroup()
                        .addGroup(PanelCreaVueloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelCreaVueloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nombre_compañia)
                            .addComponent(HoraSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelCreaVueloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(19, 19, 19)
                        .addGroup(PanelCreaVueloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(HoraLlegada, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                            .addComponent(PrecioVuelo, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelCreaVueloLayout.createSequentialGroup()
                        .addComponent(btCreaVueloCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonCreavuelo)))
                .addContainerGap())
        );
        PanelCreaVueloLayout.setVerticalGroup(
            PanelCreaVueloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelCreaVueloLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelCreaVueloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PanelCreaVueloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(OvueloComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                        .addComponent(CreaOrigen))
                    .addGroup(PanelCreaVueloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DvueloComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CreaDestino)))
                .addGap(18, 18, 18)
                .addGroup(PanelCreaVueloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HoraSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HoraLlegada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(PanelCreaVueloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombre_compañia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PrecioVuelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel11)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelCreaVueloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonCreavuelo)
                    .addComponent(btCreaVueloCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        campoNodovisTi.setPreferredSize(new java.awt.Dimension(70, 27));

        campoNodoexTi.setPreferredSize(new java.awt.Dimension(70, 27));

        campoTiempoejeTi.setPreferredSize(new java.awt.Dimension(80, 27));

        labelNodogen1.setText("Nodes visitats:");

        labelNodoexp1.setText("Nodes expandits");

        labelTiempoeje1.setText("Temps d'execució:");

        labelTiempototalTi.setText("Temps total:");

        campoTiempotoTi.setPreferredSize(new java.awt.Dimension(90, 27));

        labelpretoti.setText("Preu total:");

        ResultadosTiempo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Origen", "Destí", "Hora sortida", "Hora arribada", "Temps de vol"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ResultadosTiempo.setMinimumSize(new java.awt.Dimension(75, 72));
        ResultadosTiempo.setShowGrid(true);
        ResultadosTiempo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ResultadosTiempoMouseClicked(evt);
            }
        });
        ResultadosTiempo.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                ResultadosTiempoAncestorRemoved(evt);
            }
        });
        jScrollPane3.setViewportView(ResultadosTiempo);
        ResultadosTiempo.getColumnModel().getColumn(1).setResizable(false);
        ResultadosTiempo.getColumnModel().getColumn(4).setResizable(false);

        btPanelSalidaTiempoSortir.setText("Sortir");
        btPanelSalidaTiempoSortir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPanelSalidaTiempoSortirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PaneldatostiempoLayout = new javax.swing.GroupLayout(Paneldatostiempo);
        Paneldatostiempo.setLayout(PaneldatostiempoLayout);
        PaneldatostiempoLayout.setHorizontalGroup(
            PaneldatostiempoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PaneldatostiempoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PaneldatostiempoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btPanelSalidaTiempoSortir, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PaneldatostiempoLayout.createSequentialGroup()
                        .addGroup(PaneldatostiempoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelNodogen1)
                            .addComponent(labelNodoexp1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PaneldatostiempoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(campoNodovisTi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(campoNodoexTi, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelTiempoeje1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(campoTiempoejeTi, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PaneldatostiempoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelTiempototalTi)
                            .addComponent(labelpretoti))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PaneldatostiempoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(campoPretoti, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                            .addComponent(campoTiempotoTi, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 694, Short.MAX_VALUE))
                .addContainerGap())
        );
        PaneldatostiempoLayout.setVerticalGroup(
            PaneldatostiempoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PaneldatostiempoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(PaneldatostiempoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(campoPretoti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PaneldatostiempoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(campoTiempoejeTi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(campoNodovisTi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelTiempoeje1)
                        .addComponent(labelpretoti)
                        .addComponent(labelNodogen1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PaneldatostiempoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PaneldatostiempoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(campoNodoexTi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelNodoexp1))
                    .addGroup(PaneldatostiempoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(campoTiempotoTi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelTiempototalTi)))
                .addGap(18, 18, 18)
                .addComponent(btPanelSalidaTiempoSortir)
                .addContainerGap())
        );

        javax.swing.GroupLayout PanelSalidaTiempoLayout = new javax.swing.GroupLayout(PanelSalidaTiempo);
        PanelSalidaTiempo.setLayout(PanelSalidaTiempoLayout);
        PanelSalidaTiempoLayout.setHorizontalGroup(
            PanelSalidaTiempoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Paneldatostiempo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PanelSalidaTiempoLayout.setVerticalGroup(
            PanelSalidaTiempoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Paneldatostiempo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        PanelAbout.setName("PanelAbout"); // NOI18N

        jLabel5.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Cerques: Rutes Aèrees");

        jLabel6.setText("Autor:");

        jTextField1.setEditable(false);
        jTextField1.setText("Vicenç Juan Tomàs Montserrat");

        jLabel7.setText("Llicència:");

        jTextField2.setEditable(false);
        jTextField2.setText("GPLv3");

        jLabel8.setText("Repositori:");

        jTextField3.setEditable(false);
        jTextField3.setText("https://github.com/vtomasr5/ia-rutes");

        jLabel9.setText("Assignatura:");

        jTextField4.setEditable(false);
        jTextField4.setText("Inteligència Artificial. UIB 2011/12");

        btAboutSortir.setText("Sortir");
        btAboutSortir.setSelected(true);
        btAboutSortir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAboutSortirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelAboutLayout = new javax.swing.GroupLayout(PanelAbout);
        PanelAbout.setLayout(PanelAboutLayout);
        PanelAboutLayout.setHorizontalGroup(
            PanelAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAboutLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                    .addGroup(PanelAboutLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE))
                    .addGroup(PanelAboutLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE))
                    .addGroup(PanelAboutLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE))
                    .addGroup(PanelAboutLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE))
                    .addComponent(btAboutSortir, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        PanelAboutLayout.setVerticalGroup(
            PanelAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAboutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btAboutSortir)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TablaVuelos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Codi", "Companyia", "Hora sortida", "Hora arribada", "Origen", "Destí", "Preu"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaVuelos.setShowGrid(true);
        jScrollPane4.setViewportView(TablaVuelos);

        btPanellVolsSortir.setText("Sortir");
        btPanellVolsSortir.setSelected(true);
        btPanellVolsSortir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPanellVolsSortirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelVuelosLayout = new javax.swing.GroupLayout(PanelVuelos);
        PanelVuelos.setLayout(PanelVuelosLayout);
        PanelVuelosLayout.setHorizontalGroup(
            PanelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelVuelosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btPanellVolsSortir)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE))
                .addContainerGap())
        );
        PanelVuelosLayout.setVerticalGroup(
            PanelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelVuelosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btPanellVolsSortir)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pràctica IA. UIB 2011/12. Rutes aerees.");
        setLocationByPlatform(true);

        TextoSalida.setColumns(20);
        TextoSalida.setEditable(false);
        TextoSalida.setRows(5);
        jScrollPane1.setViewportView(TextoSalida);

        PanelBusquedas.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tipo_busqueda.add(profundidad_poda);
        profundidad_poda.setText("Profunditat amb poda");

        Criterio.add(precio_minimo);
        precio_minimo.setSelected(true);
        precio_minimo.setText("Preu mínim");

        tipo_busqueda.add(vecino_proximo);
        vecino_proximo.setText("Veí més pròxim");

        Criterio.add(tiempo_minimo);
        tiempo_minimo.setText("Temps mínim");

        busqueda_tipo.setFont(new java.awt.Font("DejaVu Sans", 1, 14));
        busqueda_tipo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        busqueda_tipo.setText("Tipus de cerques");

        tipo_busqueda.add(coste_uniforme);
        coste_uniforme.setText("Cost uniforme");

        criterio_busqueda.setFont(new java.awt.Font("DejaVu Sans", 1, 14));
        criterio_busqueda.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        criterio_busqueda.setText("Criteri de cerca");

        tipo_busqueda.add(a_estrella);
        a_estrella.setText("A* 1ª heurística");

        OrigenComboBox.setMinimumSize(new java.awt.Dimension(25, 18));
        OrigenComboBox.setPreferredSize(new java.awt.Dimension(75, 20));
        OrigenComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrigenComboBoxActionPerformed(evt);
            }
        });

        tipo_busqueda.add(profundidad);
        profundidad.setSelected(true);
        profundidad.setText("Profunditat");

        Busqueda.setFont(new java.awt.Font("DejaVu Sans", 1, 14));
        Busqueda.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Busqueda.setText("Rutes");

        DestinoComboBox.setPreferredSize(new java.awt.Dimension(75, 20));
        DestinoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DestinoComboBoxActionPerformed(evt);
            }
        });

        Destino.setText("Destí:");

        Origen.setText("Origen:");

        tipo_busqueda.add(a_estrella2);
        a_estrella2.setText("A* 2ª heurística");

        javax.swing.GroupLayout PanelBusquedasLayout = new javax.swing.GroupLayout(PanelBusquedas);
        PanelBusquedas.setLayout(PanelBusquedasLayout);
        PanelBusquedasLayout.setHorizontalGroup(
            PanelBusquedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelBusquedasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelBusquedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                    .addGroup(PanelBusquedasLayout.createSequentialGroup()
                        .addGroup(PanelBusquedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Origen)
                            .addComponent(Destino))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelBusquedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OrigenComboBox, 0, 201, Short.MAX_VALUE)
                            .addComponent(DestinoComboBox, 0, 201, Short.MAX_VALUE)))
                    .addComponent(Busqueda, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                    .addComponent(busqueda_tipo, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                    .addComponent(criterio_busqueda, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                    .addComponent(precio_minimo)
                    .addComponent(tiempo_minimo)
                    .addComponent(profundidad)
                    .addComponent(profundidad_poda)
                    .addComponent(coste_uniforme)
                    .addComponent(vecino_proximo)
                    .addComponent(a_estrella)
                    .addComponent(a_estrella2))
                .addContainerGap())
        );
        PanelBusquedasLayout.setVerticalGroup(
            PanelBusquedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelBusquedasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Busqueda)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelBusquedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Origen)
                    .addComponent(OrigenComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelBusquedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Destino)
                    .addComponent(DestinoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(busqueda_tipo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(profundidad)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(profundidad_poda)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(coste_uniforme)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(vecino_proximo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(a_estrella)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(a_estrella2)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(criterio_busqueda)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(precio_minimo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tiempo_minimo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ScrollMundo.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        ScrollMundo.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        ScrollMundo.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        BotonBuscar.setText("Iniciar cerca");
        BotonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBuscarActionPerformed(evt);
            }
        });

        Menubusquedas.setText("Arxiu");

        MenuNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        MenuNuevo.setText("Reset");
        MenuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuNuevoActionPerformed(evt);
            }
        });
        Menubusquedas.add(MenuNuevo);
        Menubusquedas.add(jSeparator3);

        MenuSotirItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        MenuSotirItem.setText("Sortir");
        MenuSotirItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSotirItemActionPerformed(evt);
            }
        });
        Menubusquedas.add(MenuSotirItem);

        jMenuBar1.add(Menubusquedas);

        Menucrear.setText("Accions");

        Menucreaciudad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        Menucreaciudad.setText("Crear ciutat");
        Menucreaciudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenucreaciudadActionPerformed(evt);
            }
        });
        Menucrear.add(Menucreaciudad);

        Menucreavuelo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        Menucreavuelo.setText("Crear vol");
        Menucreavuelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenucreavueloActionPerformed(evt);
            }
        });
        Menucrear.add(Menucreavuelo);

        Menugenale.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        Menugenale.setText("Generar aleatoris");
        Menugenale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenugenaleActionPerformed(evt);
            }
        });
        Menucrear.add(Menugenale);
        Menucrear.add(jSeparator5);

        MenuItemVerVuelos.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemVerVuelos.setText("Veure vols");
        MenuItemVerVuelos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemVerVuelosActionPerformed(evt);
            }
        });
        Menucrear.add(MenuItemVerVuelos);

        jMenuBar1.add(Menucrear);

        jMenu1.setText("Ajuda");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Sobre...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1108, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PanelBusquedas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BotonBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ScrollMundo, javax.swing.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PanelBusquedas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BotonBuscar))
                    .addComponent(ScrollMundo, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OrigenComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrigenComboBoxActionPerformed
        DestinoComboBox.removeAllItems();
        JComboBox combo = (JComboBox) evt.getSource();
        String nombre = (String) combo.getSelectedItem();
        origen = nombre;
        for (int i = 0; i < ciudades_creadas; i++) {
            if (!ciudades[i].getnombre().equals(nombre)) {
                DestinoComboBox.addItem(ciudades[i].getnombre());
            }
        }
    }//GEN-LAST:event_OrigenComboBoxActionPerformed

    private void BotonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBuscarActionPerformed
        if (OrigenComboBox.getItemCount() == 0 || DestinoComboBox.getItemCount() == 0) {
            JOptionPane.showMessageDialog(this, "No hi ha ciutats suficients d'alta.", "Alerta", JOptionPane.WARNING_MESSAGE);
        } else {    
            if (listaVuelos[0][0].Vacia()) {
                JOptionPane.showMessageDialog(this, "No hi ha cap vol d'alta. No se pot cercar.", "Alerta", JOptionPane.WARNING_MESSAGE);
            } else {
                int elemd = DestinoComboBox.getSelectedIndex();
                String lugard = (String) DestinoComboBox.getItemAt(elemd);
                int elemo = OrigenComboBox.getSelectedIndex();
                boolean coste = true;
                String lugaro = (String) OrigenComboBox.getItemAt(elemo);
                pinta_mapa();
                reiniciarTabla();
                if (elemd != -1) {
                    if (profundidad.isSelected()) {
                        if (precio_minimo.isSelected()) {
                            try {
                                coste = true;
                                busqueda_prof(lugaro, lugard, 0);
                            } catch (Exception ex) {
                                mostrarMissatgeError(null, ex);
                                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            try {
                                coste = false;
                                busqueda_prof(lugaro, lugard, 1);
                            } catch (Exception ex) {
                                mostrarMissatgeError(null, ex);
                                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }//tiempo minimo
                    } else if (profundidad_poda.isSelected()) {
                        if (precio_minimo.isSelected()) {
                            try {
                                coste = true;
                                busqueda_prof_poda_coste(lugaro, lugard);
                            } catch (Exception ex) {
                                mostrarMissatgeError(null, ex);
                                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            try {
                                coste = false;
                                busqueda_prof_poda_tiempo(lugaro, lugard);
                            } catch (Exception ex) {
                                mostrarMissatgeError(null, ex);
                                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    } else if (coste_uniforme.isSelected()) {
                        if (precio_minimo.isSelected()) {
                            try {
                                coste = true;
                                busqueda_costo_uniforme_coste(lugaro, lugard);
                            } catch (Exception ex) {
                                mostrarMissatgeError(null, ex);
                                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            try {
                                coste = false;
                                busqueda_costo_uniforme_tiempo(lugaro, lugard);
                            } catch (Exception ex) {
                                mostrarMissatgeError(null, ex);
                                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    } else if (vecino_proximo.isSelected()) {
                        if (precio_minimo.isSelected()) {
                            try {
                                coste = true;
                                busqueda_vecino_mas_proximo(lugaro, lugard, 0);
                            } catch (Exception ex) {
                                mostrarMissatgeError(null, ex);
                                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            try {
                                coste = false;
                                busqueda_vecino_mas_proximo(lugaro, lugard, 1);
                            } catch (Exception ex) {
                                mostrarMissatgeError(null, ex);
                                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    } else if (a_estrella.isSelected()) {          //A estrella
                        if (precio_minimo.isSelected()) {
                            coste = true;
                            try {
                                busqueda_a_estrella_cost(lugaro, lugard);
                            } catch (Exception ex) {
                                mostrarMissatgeError(null, ex);
                                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            coste = false;
                            try {
                                busqueda_a_estrella_temps(lugaro, lugard);
                            } catch (Exception ex) {
                                mostrarMissatgeError(null, ex);
                                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    } else {
                        if (precio_minimo.isSelected()) {
                            coste = true;
                            try {
                                busqueda_a_estrella2_cost(lugaro, lugard);
                            } catch (Exception ex) {
                                mostrarMissatgeError(null, ex);
                                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            coste = false;
                            try {
                                busqueda_a_estrella2_temps(lugaro, lugard);
                            } catch (Exception ex) {
                                mostrarMissatgeError(null, ex);
                                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                    }
                    DSalidaCosteTiempo = new JDialog();
                    DSalidaCosteTiempo.setModal(true);
                    DSalidaCosteTiempo.setTitle("Resultats");
                    if (coste) {
                        DSalidaCosteTiempo.setSize(PanelSalidaCoste.getPreferredSize());
                        DSalidaCosteTiempo.add(PanelSalidaCoste);
                    } else {
                        DSalidaCosteTiempo.setSize(PanelSalidaTiempo.getPreferredSize());
                        DSalidaCosteTiempo.add(PanelSalidaTiempo);
                    }
                    DSalidaCosteTiempo.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                    DSalidaCosteTiempo.setLocationByPlatform(true);
                    DSalidaCosteTiempo.pack();
                    DSalidaCosteTiempo.setVisible(true);
                }
            }
        }

    }//GEN-LAST:event_BotonBuscarActionPerformed

    private void CreaCiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreaCiudadActionPerformed
        if (nombre_ciudad.getText().equals("") || coordenadax.getText().equals("") || coordenaday.getText().equals("")) {
            JOptionPane.showMessageDialog(DCreaCiudad, "Falten dades per omplir.", "Alerta", JOptionPane.WARNING_MESSAGE);
        } else {
            if ((Integer.parseInt(coordenadax.getText()) < 0) || (Integer.parseInt(coordenaday.getText()) < 0)) {
                JOptionPane.showMessageDialog(DCreaCiudad, "Els valors de X i Y no poden ser negatius.", "Alerta", JOptionPane.WARNING_MESSAGE);    
            } else {
                if ((Integer.parseInt(coordenadax.getText()) > 795) || (Integer.parseInt(coordenaday.getText()) > 430)) {
                    JOptionPane.showMessageDialog(DCreaCiudad, "Els valors de X i Y no poden sortir del mapa. Maxim: X:795 i Y:430", "Alerta", JOptionPane.WARNING_MESSAGE);    
                } else {
                    Integer x = Integer.parseInt(coordenadax.getText());
                    Integer y = Integer.parseInt(coordenaday.getText());
                    mundo.setModoRuta(0);
                    if (nombre_ciudad.getText() != null) {
                        ciudades[ciudades_creadas] = new Ciudad(nombre_ciudad.getText(), x, y);
                        ciudades_creadas = ciudades_creadas + 1;
                        mundo.setNumciudades(ciudades_creadas);
                        repaint();
                    }
                    OrigenComboBox.addItem(ciudades[ciudades_creadas - 1].getnombre());
                    OvueloComboBox.addItem(ciudades[ciudades_creadas - 1].getnombre());
                    if (ciudades_creadas - 1 != 0) {
                        DestinoComboBox.addItem(ciudades[ciudades_creadas - 1].getnombre());
                    }
                    nombre_ciudad.setText("");
                    DCreaCiudad.dispose();
                }
            }
        }
    }//GEN-LAST:event_CreaCiudadActionPerformed

    private void DestinoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DestinoComboBoxActionPerformed
        JComboBox combo = (JComboBox) evt.getSource();
        String nombre = (String) combo.getSelectedItem();
        destino = nombre;
    }//GEN-LAST:event_DestinoComboBoxActionPerformed

    private void OvueloComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OvueloComboBoxActionPerformed
        DvueloComboBox.removeAllItems();
        JComboBox combo = (JComboBox) evt.getSource();
        String nombre = (String) combo.getSelectedItem();
//        print(nombre);
        origen = nombre;
        for (int i = 0; i < ciudades_creadas; i++) {
            if (!ciudades[i].getnombre().equals(nombre)) {
                DvueloComboBox.addItem(ciudades[i].getnombre());
            }
        }
    }//GEN-LAST:event_OvueloComboBoxActionPerformed

    private void MenucreavueloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenucreavueloActionPerformed
        DCreaVuelo = new JDialog();
        DCreaVuelo.setTitle("Crea nou vol");
        DCreaVuelo.setModal(true);
        DCreaVuelo.getRootPane().setDefaultButton(BotonCreavuelo);
        DCreaVuelo.setSize(PanelCreaVuelo.getPreferredSize());
        DCreaVuelo.setLocationByPlatform(true);
        if (DvueloComboBox.getSelectedIndex() == -1) {
            for (int i = 1; i < ciudades_creadas; i++) {
                DvueloComboBox.addItem(ciudades[i].getnombre());
            }
        }
        DCreaVuelo.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        DCreaVuelo.add(PanelCreaVuelo);
        DCreaVuelo.pack();
        DCreaVuelo.setVisible(true);
    }//GEN-LAST:event_MenucreavueloActionPerformed

    private void MenucreaciudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenucreaciudadActionPerformed
        nombre_ciudad.setText("");
        DCreaCiudad = new JDialog();
        DCreaCiudad.setTitle("Crear nova ciutat");
        DCreaCiudad.setSize(400, 200);
        DCreaCiudad.setModal(true);
        DCreaCiudad.getRootPane().setDefaultButton(CreaCiudad);
        DCreaCiudad.setLocationByPlatform(true);
        DCreaCiudad.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        DCreaCiudad.add(PanelCreaCiudad);
        DCreaCiudad.pack();
        DCreaCiudad.setVisible(true);
    }//GEN-LAST:event_MenucreaciudadActionPerformed

    private void BotonCreavueloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCreavueloActionPerformed
        if (HoraSalida.getText().equals("") || HoraLlegada.getText().equals("") || PrecioVuelo.getText().equals("") || nombre_compañia.getText().equals("")) {
            JOptionPane.showMessageDialog(DCreaVuelo, "Faltes dades per omplir.", "Alerta", JOptionPane.WARNING_MESSAGE);
        } else {
            if (DvueloComboBox.getItemCount() == 0 || OvueloComboBox.getItemCount() == 0) {
                JOptionPane.showMessageDialog(DCreaVuelo, "No hi ha ciutats creades. No se poden crear vols.", "Alerta", JOptionPane.WARNING_MESSAGE);
            } else {
                if (DvueloComboBox.getSelectedItem().toString().equals(OvueloComboBox.getSelectedItem().toString())) {
                    JOptionPane.showMessageDialog(DCreaVuelo, "No se pot crear un vol a la mateixa ciutat.", "Alerta", JOptionPane.WARNING_MESSAGE);
                } else {
                    if (Integer.parseInt(PrecioVuelo.getText()) < 0) {
                        JOptionPane.showMessageDialog(DCreaVuelo, "El preu d'un vol no pot ser negatiu.", "Alerta", JOptionPane.WARNING_MESSAGE);
                    } else {            
                        try {
                            DateFormat df = new SimpleDateFormat("dd/MM/yyyy hh:mm");
                            DateFormat df2 = new SimpleDateFormat("hh:mm");
                            Date fechaActual = new Date();
                            Date fecha_salida = null;
                            Date fecha_llegada = null;
                            
                            String dia2 = null;
                            mundo.setModoRuta(0);
                            
                            SimpleDateFormat formato = new SimpleDateFormat("dd");
                            String dia = formato.format(fechaActual);
                            SimpleDateFormat formato2 = new SimpleDateFormat("MM");
                            String mes = formato2.format(fechaActual);
                            SimpleDateFormat formato3 = new SimpleDateFormat("yyyy");
                            String año = formato3.format(fechaActual);
                            
                            int posicion_x = posicion_ciudad("1"); //origen
                            int posicion_y = posicion_ciudad("2"); //desti
//                            print("Posició origen: " + posicion_x + " Posició desti: " + posicion_y);
                            
                            dia = Integer.toString(Integer.parseInt(dia) + 1);
                            dia2 = dia;
                            String hora_lleg = HoraLlegada.getText();
                            String hora_sal = HoraSalida.getText();
                            
                            if (df2.parse(hora_sal).after(df2.parse(hora_lleg))) {
                                dia = Integer.toString(Integer.valueOf(dia) + 1);
                            }

                            fecha_salida = df.parse(dia2 + "/" + mes + "/" + año + " " + hora_sal);
                            fecha_llegada = df.parse(dia + "/" + mes + "/" + año + " " + hora_lleg);
                            
                            if (posicion_y != -1) {
                                int posox = ciudades[posicion_x].getcx();
                                int posoy = ciudades[posicion_x].getcy();
                                int posdx = ciudades[posicion_y].getcx();
                                int posdy = ciudades[posicion_y].getcy();
//                                print("O: " + ciudades[posicion_x].getnombre() + " D: " + ciudades[posicion_y].getnombre());
                                for (int i = 0; i < 6; i++) {
                                    listaVuelos[posicion_x][posicion_y].insertarnuevo(codigo, nombre_compañia.getText(), Float.parseFloat(PrecioVuelo.getText()), fecha_salida, fecha_llegada, posox, posoy, posdx, posdy);
                                    dia = Integer.toString(Integer.valueOf(dia) + 1);
                                    dia2 = Integer.toString(Integer.valueOf(dia2) + 1);
                                    fecha_salida = df.parse(dia2 + "/" + mes + "/" + año + " " + hora_sal);
                                    fecha_llegada = df.parse(dia + "/" + mes + "/" + año + " " + hora_lleg);
                                }
                                codigo++;
                                repaint();
                            }
                            DCreaVuelo.dispose();
                        } catch (Exception ex) {
                            mostrarMissatgeError(null, ex);
                            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_BotonCreavueloActionPerformed

    private void DvueloComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DvueloComboBoxActionPerformed
        JComboBox combo = (JComboBox) evt.getSource();
        String nombre = (String) combo.getSelectedItem();
        destino = nombre;
    }//GEN-LAST:event_DvueloComboBoxActionPerformed

    private void ResultadosCosteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResultadosCosteMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            mundo.setModoRuta(1);
            repaint();
            if (ResultadosCoste.getValueAt(ResultadosCoste.getSelectedRow(), 4) != null) {
                mundo.setModoRuta(2);
                mundo.setSeleccionado(ResultadosCoste.getSelectedRow() + 1);
            }
        }
    }//GEN-LAST:event_ResultadosCosteMouseClicked

    private void ResultadosCosteAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_ResultadosCosteAncestorRemoved
        mundo.setModoRuta(0);
        repaint();
    }//GEN-LAST:event_ResultadosCosteAncestorRemoved

    private void MenugenaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenugenaleActionPerformed
        DGenAle = new JDialog();
        DGenAle.setSize(425, 200);
        DGenAle.setModal(true);
        DGenAle.setTitle("Generar aleatoris");
        DGenAle.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        DGenAle.setLocationByPlatform(true);
        DGenAle.add(PanelGenAle);
        DGenAle.pack();
        DGenAle.setVisible(true);
    }//GEN-LAST:event_MenugenaleActionPerformed

    private void CreaGenAleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreaGenAleActionPerformed
        if (Integer.parseInt(CiuGen.getText()) < 2 || Integer.parseInt(texto_numvuelos.getText()) < 1) {
            JOptionPane.showMessageDialog(DGenAle, "Has d'introduir almenys dues ciutats i un vol", "Alerta", JOptionPane.WARNING_MESSAGE);
        } else {
            añadir_ciudad_auto(Integer.parseInt(CiuGen.getText()));
            actualizar_matriz_distancias();
            if (personalizado.isSelected()) {
                try {
                    añadir_vuelo_auto(Integer.parseInt(texto_numvuelos.getText()));
                } catch (ParseException ex) {
                    mostrarMissatgeError(null, ex);
                    Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    conectar_todas_ciudades();
                } catch (ParseException ex) {
                    mostrarMissatgeError(null, ex);
                    Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            DGenAle.dispose();
        }
    }//GEN-LAST:event_CreaGenAleActionPerformed

    private void MenuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuNuevoActionPerformed
        OrigenComboBox.removeAllItems();
        DestinoComboBox.removeAllItems();
        OvueloComboBox.removeAllItems();
        DvueloComboBox.removeAllItems();
        ciudades = new Ciudad[max_ciudades];        
        ciudades_creadas = 0;
        codigo = 1;
        TextoSalida.setText("");
        inicializar_matriz_vuelos();
        init();
        inicializar_matriz_distancias();
    }//GEN-LAST:event_MenuNuevoActionPerformed

    private void ResultadosTiempoAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_ResultadosTiempoAncestorRemoved
        mundo.setModoRuta(0);
        repaint();
    }//GEN-LAST:event_ResultadosTiempoAncestorRemoved

    private void ResultadosTiempoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResultadosTiempoMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            mundo.setModoRuta(1);
            repaint();
            if (ResultadosTiempo.getValueAt(ResultadosTiempo.getSelectedRow(), 4) != null) {
                mundo.setModoRuta(2);
                mundo.setSeleccionado(ResultadosTiempo.getSelectedRow() + 1);
            }
        }
    }//GEN-LAST:event_ResultadosTiempoMouseClicked

    private void MenuSotirItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSotirItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_MenuSotirItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        DAbout = new JDialog(this);
        DAbout.setTitle("Sobre...");
        DAbout.setModal(true);
        DAbout.setLocationByPlatform(true);
        DAbout.setPreferredSize(new Dimension(430, 290));
        DAbout.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        DAbout.add(PanelAbout);
        DAbout.pack();
        DAbout.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void MenuItemVerVuelosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemVerVuelosActionPerformed
        Vuelo v = new Vuelo();
        int codi;
        String comp;
        Date Hllegada, Hsalida;
        float preu;
        
        for (int i = 0; i < ciudades_creadas; i++) {
            for (int j = 0; j < ciudades_creadas; j++) {
                codi = listaVuelos[i][j].recuperar_cod(v);
                comp = listaVuelos[i][j].recuperar_compañia(v);
                Hllegada = listaVuelos[i][j].recuperar_hora_llegada(v);
                Hsalida = listaVuelos[i][j].recuperar_hora_salida(v);
                preu = listaVuelos[i][j].recuperar_precio(v);
                
                for (int k = 0; k < 1; k++) {
                    TablaVuelos.setValueAt(codi, k, 0);
                    TablaVuelos.setValueAt(comp, k, 1); 
                    TablaVuelos.setValueAt(Hsalida.toString(), k, 2); 
                    TablaVuelos.setValueAt(Hllegada.toString(), k, 3); 
//                    TablaVuelos.setValueAt(origen, k, 4); 
//                    TablaVuelos.setValueAt(desti, k, 5); 
                    TablaVuelos.setValueAt(preu, k, 6); 
                    
                }
            }
        }
        
        DVeureVols = new JDialog(this);
        DVeureVols.setTitle("Vols creats");
        DVeureVols.setModal(true);
        DVeureVols.add(PanelVuelos);
        DVeureVols.setLocationByPlatform(true);
//        DVeureVols.setPreferredSize(new Dimension(770, 350));
        DVeureVols.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        DVeureVols.pack();
        DVeureVols.setVisible(true);        
    }//GEN-LAST:event_MenuItemVerVuelosActionPerformed

    private void btGenAleCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGenAleCancelarActionPerformed
        DGenAle.dispose();
    }//GEN-LAST:event_btGenAleCancelarActionPerformed

    private void btCrearCiutatCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCrearCiutatCancelarActionPerformed
        DCreaCiudad.dispose();
    }//GEN-LAST:event_btCrearCiutatCancelarActionPerformed

    private void btCreaVueloCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCreaVueloCancelarActionPerformed
        DCreaVuelo.dispose();
    }//GEN-LAST:event_btCreaVueloCancelarActionPerformed

    private void btAboutSortirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAboutSortirActionPerformed
        DAbout.dispose();
    }//GEN-LAST:event_btAboutSortirActionPerformed

    private void btPanellVolsSortirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPanellVolsSortirActionPerformed
        DVeureVols.dispose();
    }//GEN-LAST:event_btPanellVolsSortirActionPerformed

    private void btPanelSalidaTiempoSortirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPanelSalidaTiempoSortirActionPerformed
        DSalidaCosteTiempo.dispose();
    }//GEN-LAST:event_btPanelSalidaTiempoSortirActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DSalidaCosteTiempo.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void todos_con_todosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_todos_con_todosActionPerformed
        texto_numvuelos.setEnabled(false);
    }//GEN-LAST:event_todos_con_todosActionPerformed

    private void personalizadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personalizadoActionPerformed
        texto_numvuelos.setEnabled(true);
    }//GEN-LAST:event_personalizadoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] Main) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
//                System.setProperty("apple.laf.useScreenMenuBar", "true");
                new Ventana().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonBuscar;
    private javax.swing.JButton BotonCreavuelo;
    private javax.swing.JLabel Busqueda;
    private javax.swing.JTextField CiuGen;
    private javax.swing.JButton CreaCiudad;
    private javax.swing.JLabel CreaDestino;
    private javax.swing.JButton CreaGenAle;
    private javax.swing.JLabel CreaOrigen;
    private javax.swing.ButtonGroup CritVuelo;
    private javax.swing.ButtonGroup Criterio;
    private javax.swing.JLabel Destino;
    private javax.swing.JComboBox DestinoComboBox;
    private javax.swing.JComboBox DvueloComboBox;
    private javax.swing.JTextField HoraLlegada;
    private javax.swing.JTextField HoraSalida;
    private javax.swing.JMenuItem MenuItemVerVuelos;
    private javax.swing.JMenuItem MenuNuevo;
    private javax.swing.JMenuItem MenuSotirItem;
    private javax.swing.JMenu Menubusquedas;
    private javax.swing.JMenuItem Menucreaciudad;
    private javax.swing.JMenu Menucrear;
    private javax.swing.JMenuItem Menucreavuelo;
    private javax.swing.JMenuItem Menugenale;
    private javax.swing.JLabel Origen;
    private javax.swing.JComboBox OrigenComboBox;
    private javax.swing.JComboBox OvueloComboBox;
    private javax.swing.JPanel PanelAbout;
    private javax.swing.JPanel PanelBusquedas;
    private javax.swing.JPanel PanelCreaCiudad;
    private javax.swing.JPanel PanelCreaVuelo;
    private javax.swing.JPanel PanelGenAle;
    private javax.swing.JPanel PanelSalidaCoste;
    private javax.swing.JPanel PanelSalidaTiempo;
    private javax.swing.JPanel PanelVuelos;
    private javax.swing.JPanel Paneldatoscoste;
    private javax.swing.JPanel Paneldatostiempo;
    private javax.swing.JTextField PrecioVuelo;
    private javax.swing.JTable ResultadosCoste;
    private javax.swing.JTable ResultadosTiempo;
    private javax.swing.JScrollPane ScrollMundo;
    private javax.swing.JTable TablaVuelos;
    private javax.swing.JTextArea TextoSalida;
    private javax.swing.JRadioButton a_estrella;
    private javax.swing.JRadioButton a_estrella2;
    private javax.swing.JButton btAboutSortir;
    private javax.swing.JButton btCreaVueloCancelar;
    private javax.swing.JButton btCrearCiutatCancelar;
    private javax.swing.JButton btGenAleCancelar;
    private javax.swing.JButton btPanelSalidaTiempoSortir;
    private javax.swing.JButton btPanellVolsSortir;
    private javax.swing.JLabel busqueda_tipo;
    private javax.swing.JTextField campoCostetotal;
    private javax.swing.JTextField campoNodoexTi;
    private javax.swing.JTextField campoNodoexp;
    private javax.swing.JTextField campoNodovis;
    private javax.swing.JTextField campoNodovisTi;
    private javax.swing.JTextField campoPretoti;
    private javax.swing.JTextField campoTiempoeje;
    private javax.swing.JTextField campoTiempoejeTi;
    private javax.swing.JTextField campoTiempotoTi;
    private javax.swing.JTextField coordenadax;
    private javax.swing.JTextField coordenaday;
    private javax.swing.JRadioButton coste_uniforme;
    private javax.swing.JLabel criterio_busqueda;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel labelCosteTotal;
    private javax.swing.JLabel labelNodoexp;
    private javax.swing.JLabel labelNodoexp1;
    private javax.swing.JLabel labelNodogen1;
    private javax.swing.JLabel labelNodovis;
    private javax.swing.JLabel labelTiempoeje;
    private javax.swing.JLabel labelTiempoeje1;
    private javax.swing.JLabel labelTiempototalTi;
    private javax.swing.JLabel label_ciugen;
    private javax.swing.JLabel label_coordenadas;
    private javax.swing.JLabel label_nombre_ciudad;
    private javax.swing.JLabel label_numvuelos;
    private javax.swing.JLabel label_x;
    private javax.swing.JLabel label_y;
    private javax.swing.JLabel labelpretoti;
    private javax.swing.JTextField nombre_ciudad;
    private javax.swing.JTextField nombre_compañia;
    private javax.swing.JRadioButton personalizado;
    private javax.swing.JRadioButton precio_minimo;
    private javax.swing.JRadioButton profundidad;
    private javax.swing.JRadioButton profundidad_poda;
    private javax.swing.JTextField texto_numvuelos;
    private javax.swing.JRadioButton tiempo_minimo;
    private javax.swing.ButtonGroup tipo_busqueda;
    private javax.swing.JRadioButton todos_con_todos;
    private javax.swing.JRadioButton vecino_proximo;
    // End of variables declaration//GEN-END:variables
}
